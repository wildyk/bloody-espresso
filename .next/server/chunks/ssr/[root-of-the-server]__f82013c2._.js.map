{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\nimport postgres from 'postgres';\nimport { z } from 'zod';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\nconst MenuSchema = z.object({\n  id: z.string(),\n  nama_produk: z.string(),\n  harga_produk: z.number(),\n});\n\nconst TransaksiSchema = z.object({\n  id: z.string(),\n  id_produk: z.string(),\n  nama_pembeli: z.string(),\n  total_harga: z.number(),\n  tanggal_transaksi: z.string(),\n});\n\nconst CreateMenu = MenuSchema.omit({ id: true });\nconst UpdateMenu = MenuSchema.omit({ id: true });\nconst CreateTransaksi = TransaksiSchema.omit({ id: true, tanggal_transaksi: true });\n\nexport async function createMenu(formData: FormData) {\n  const { nama_produk, harga_produk } = CreateMenu.parse({\n    nama_produk: formData.get('nama_produk'),\n    harga_produk: Number(formData.get('harga_produk')),\n  });\n\n  await sql`\n    INSERT INTO produk (nama_produk, harga_produk)\n    VALUES (${nama_produk}, ${harga_produk})\n  `;\n\n  revalidatePath('/admin/dashboard/menu');\n  redirect('/admin/dashboard/menu');\n}\n\nexport async function updateMenu(id: string, formData: FormData) {\n  const { nama_produk, harga_produk } = UpdateMenu.parse({\n    nama_produk: formData.get('nama_produk'),\n    harga_produk: Number(formData.get('harga_produk')),\n  });\n\n  await sql`\n    UPDATE produk\n    SET nama_produk = ${nama_produk}, harga_produk = ${harga_produk}\n    WHERE id_produk = ${id}\n  `;\n\n  revalidatePath('/admin/dashboard/menu');\n  redirect('/admin/dashboard/menu');\n}\n\nexport async function deleteMenu(id: string) {\n  await sql`DELETE FROM produk WHERE id_produk = ${id}`;\n  revalidatePath('/admin/dashboard/menu');\n}\n\nexport async function createTransaksi(formData: FormData) {\n  const { id_produk, nama_pembeli, total_harga } = CreateTransaksi.parse({\n    id_produk: formData.get('id_produk'),\n    nama_pembeli: formData.get('nama_pembeli'),\n    total_harga: Number(formData.get('total_harga')),\n  });\n\n  const tanggal_transaksi = new Date().toISOString().split('T')[0];\n\n  await sql`\n    INSERT INTO transaksi (id_produk, nama_pembeli, total_harga, tanggal_transaksi)\n    VALUES (${id_produk}, ${nama_pembeli}, ${total_harga}, ${tanggal_transaksi})\n  `;\n\n  revalidatePath('/admin/dashboard/transaksi');\n  redirect('/admin/dashboard/transaksi');\n}\n\n"],"names":[],"mappings":";;;;;;;;AAEA;AACA;AAAA;AACA;AACA;AAAA;;;;;;;;AAEA,MAAM,MAAM,CAAA,GAAA,wIAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IAAE,KAAK;AAAU;AAEjE,MAAM,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,IAAI,iLAAA,CAAA,IAAC,CAAC,MAAM;IACZ,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM;IACrB,cAAc,iLAAA,CAAA,IAAC,CAAC,MAAM;AACxB;AAEA,MAAM,kBAAkB,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/B,IAAI,iLAAA,CAAA,IAAC,CAAC,MAAM;IACZ,WAAW,iLAAA,CAAA,IAAC,CAAC,MAAM;IACnB,cAAc,iLAAA,CAAA,IAAC,CAAC,MAAM;IACtB,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM;IACrB,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM;AAC7B;AAEA,MAAM,aAAa,WAAW,IAAI,CAAC;IAAE,IAAI;AAAK;AAC9C,MAAM,aAAa,WAAW,IAAI,CAAC;IAAE,IAAI;AAAK;AAC9C,MAAM,kBAAkB,gBAAgB,IAAI,CAAC;IAAE,IAAI;IAAM,mBAAmB;AAAK;AAE1E,eAAe,WAAW,QAAkB;IACjD,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,WAAW,KAAK,CAAC;QACrD,aAAa,SAAS,GAAG,CAAC;QAC1B,cAAc,OAAO,SAAS,GAAG,CAAC;IACpC;IAEA,MAAM,GAAG,CAAC;;YAEA,EAAE,YAAY,EAAE,EAAE,aAAa;EACzC,CAAC;IAED,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX;AAEO,eAAe,WAAW,EAAU,EAAE,QAAkB;IAC7D,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,WAAW,KAAK,CAAC;QACrD,aAAa,SAAS,GAAG,CAAC;QAC1B,cAAc,OAAO,SAAS,GAAG,CAAC;IACpC;IAEA,MAAM,GAAG,CAAC;;sBAEU,EAAE,YAAY,iBAAiB,EAAE,aAAa;sBAC9C,EAAE,GAAG;EACzB,CAAC;IAED,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX;AAEO,eAAe,WAAW,EAAU;IACzC,MAAM,GAAG,CAAC,qCAAqC,EAAE,GAAG,CAAC;IACrD,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;AACjB;AAEO,eAAe,gBAAgB,QAAkB;IACtD,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,gBAAgB,KAAK,CAAC;QACrE,WAAW,SAAS,GAAG,CAAC;QACxB,cAAc,SAAS,GAAG,CAAC;QAC3B,aAAa,OAAO,SAAS,GAAG,CAAC;IACnC;IAEA,MAAM,oBAAoB,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IAEhE,MAAM,GAAG,CAAC;;YAEA,EAAE,UAAU,EAAE,EAAE,aAAa,EAAE,EAAE,YAAY,EAAE,EAAE,kBAAkB;EAC7E,CAAC;IAED,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX;;;IApDsB;IAeA;IAgBA;IAKA;;AApCA,+OAAA;AAeA,+OAAA;AAgBA,+OAAA;AAKA,+OAAA","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/.next-internal/server/app/admin/dashboard/transaksi/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {deleteMenu as '4092bf8249b5cf83282f76425a4f104d078960b79c'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/menu/buttons.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const CreateProduk = registerClientReference(\n    function() { throw new Error(\"Attempted to call CreateProduk() from the server but CreateProduk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx <module evaluation>\",\n    \"CreateProduk\",\n);\nexport const DeleteProduk = registerClientReference(\n    function() { throw new Error(\"Attempted to call DeleteProduk() from the server but DeleteProduk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx <module evaluation>\",\n    \"DeleteProduk\",\n);\nexport const UpdateProduk = registerClientReference(\n    function() { throw new Error(\"Attempted to call UpdateProduk() from the server but UpdateProduk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx <module evaluation>\",\n    \"UpdateProduk\",\n);\n"],"names":[],"mappings":";;;;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,6DACA;AAEG,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,6DACA;AAEG,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,6DACA","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/menu/buttons.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const CreateProduk = registerClientReference(\n    function() { throw new Error(\"Attempted to call CreateProduk() from the server but CreateProduk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx\",\n    \"CreateProduk\",\n);\nexport const DeleteProduk = registerClientReference(\n    function() { throw new Error(\"Attempted to call DeleteProduk() from the server but DeleteProduk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx\",\n    \"DeleteProduk\",\n);\nexport const UpdateProduk = registerClientReference(\n    function() { throw new Error(\"Attempted to call UpdateProduk() from the server but UpdateProduk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx\",\n    \"UpdateProduk\",\n);\n"],"names":[],"mappings":";;;;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,yCACA;AAEG,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,yCACA;AAEG,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,yCACA","debugId":null}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/admin/dashboard/transaksi/page.tsx"],"sourcesContent":["import { Suspense } from 'react';\r\nimport TransaksiSkeleton from './transaksiskeleton';\r\nimport TransaksiTableWrapper from './transaksitablewrapper';\r\nimport { CreateTransaksi } from '@/app/ui/menu/buttons';\r\n\r\ninterface Props {\r\n  searchParams?: { [key: string]: string | string[] | undefined };\r\n}\r\n\r\nexport default function TransaksiPage({ searchParams }: Props) {\r\n  return (\r\n    <section className=\"p-6\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h1 className=\"text-2xl font-bold\">Kelola Transaksi</h1>\r\n        <CreateTransaksi />\r\n      </div>\r\n      \r\n      <Suspense fallback={<TransaksiSkeleton />}>\r\n        <TransaksiTableWrapper searchParams={searchParams} />\r\n      </Suspense>\r\n    </section>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;AAMe,SAAS,cAAc,EAAE,YAAY,EAAS;IAC3D,qBACE,8OAAC;QAAQ,WAAU;;0BACjB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAqB;;;;;;kCACnC,8OAAC,oIAAA,CAAA,kBAAe;;;;;;;;;;;0BAGlB,8OAAC,qMAAA,CAAA,WAAQ;gBAAC,wBAAU,8OAAC,mKAAA,CAAA,UAAiB;;;;;0BACpC,cAAA,8OAAC,uKAAA,CAAA,UAAqB;oBAAC,cAAc;;;;;;;;;;;;;;;;;AAI7C","debugId":null}}]
}