{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/button.tsx"],"sourcesContent":["import clsx from 'clsx';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode;\n}\n\nexport function Button({ children, className, ...rest }: ButtonProps) {\n  return (\n    <button\n      {...rest}\n      className={clsx(\n        'flex h-10 items-center rounded-lg bg-blue-500 px-4 text-sm font-medium text-white transition-colors hover:bg-blue-400  focus-visible:outline-offset-2 focus-visible:outline-blue-500 active:bg-blue-600 aria-disabled:cursor-not-allowed aria-disabled:opacity-50',\n        className,\n      )}\n    >\n      {children}\n    </button>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAMO,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,MAAmB;IAClE,qBACE,8OAAC;QACE,GAAG,IAAI;QACR,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,qQACA;kBAGD;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/invoices/create-form.tsx"],"sourcesContent":["import { CustomerField } from '@/app/lib/definitions';\nimport Link from 'next/link';\nimport {\n  CheckIcon,\n  ClockIcon,\n  CurrencyDollarIcon,\n  UserCircleIcon,\n} from '@heroicons/react/24/outline';\nimport { Button } from '@/app/ui/button';\n\nexport default function Form({ customers }: { customers: CustomerField[] }) {\n  return (\n    <form>\n      <div className=\"rounded-md bg-gray-50 p-4 md:p-6\">\n        {/* Customer Name */}\n        <div className=\"mb-4\">\n          <label htmlFor=\"customer\" className=\"mb-2 block text-sm font-medium\">\n            Choose customer\n          </label>\n          <div className=\"relative\">\n            <select\n              id=\"customer\"\n              name=\"customerId\"\n              className=\"peer block w-full cursor-pointer rounded-md border border-gray-200 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500\"\n              defaultValue=\"\"\n            >\n              <option value=\"\" disabled>\n                Select a customer\n              </option>\n              {customers.map((customer) => (\n                <option key={customer.id} value={customer.id}>\n                  {customer.name}\n                </option>\n              ))}\n            </select>\n            <UserCircleIcon className=\"pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500\" />\n          </div>\n        </div>\n\n        {/* Invoice Amount */}\n        <div className=\"mb-4\">\n          <label htmlFor=\"amount\" className=\"mb-2 block text-sm font-medium\">\n            Choose an amount\n          </label>\n          <div className=\"relative mt-2 rounded-md\">\n            <div className=\"relative\">\n              <input\n                id=\"amount\"\n                name=\"amount\"\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"Enter USD amount\"\n                className=\"peer block w-full rounded-md border border-gray-200 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500\"\n              />\n              <CurrencyDollarIcon className=\"pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Invoice Status */}\n        <fieldset>\n          <legend className=\"mb-2 block text-sm font-medium\">\n            Set the invoice status\n          </legend>\n          <div className=\"rounded-md border border-gray-200 bg-white px-[14px] py-3\">\n            <div className=\"flex gap-4\">\n              <div className=\"flex items-center\">\n                <input\n                  id=\"pending\"\n                  name=\"status\"\n                  type=\"radio\"\n                  value=\"pending\"\n                  className=\"h-4 w-4 cursor-pointer border-gray-300 bg-gray-100 text-gray-600 focus:ring-2\"\n                />\n                <label\n                  htmlFor=\"pending\"\n                  className=\"ml-2 flex cursor-pointer items-center gap-1.5 rounded-full bg-gray-100 px-3 py-1.5 text-xs font-medium text-gray-600\"\n                >\n                  Pending <ClockIcon className=\"h-4 w-4\" />\n                </label>\n              </div>\n              <div className=\"flex items-center\">\n                <input\n                  id=\"paid\"\n                  name=\"status\"\n                  type=\"radio\"\n                  value=\"paid\"\n                  className=\"h-4 w-4 cursor-pointer border-gray-300 bg-gray-100 text-gray-600 focus:ring-2\"\n                />\n                <label\n                  htmlFor=\"paid\"\n                  className=\"ml-2 flex cursor-pointer items-center gap-1.5 rounded-full bg-green-500 px-3 py-1.5 text-xs font-medium text-white\"\n                >\n                  Paid <CheckIcon className=\"h-4 w-4\" />\n                </label>\n              </div>\n            </div>\n          </div>\n        </fieldset>\n      </div>\n      <div className=\"mt-6 flex justify-end gap-4\">\n        <Link\n          href=\"/dashboard/invoices\"\n          className=\"flex h-10 items-center rounded-lg bg-gray-100 px-4 text-sm font-medium text-gray-600 transition-colors hover:bg-gray-200\"\n        >\n          Cancel\n        </Link>\n        <Button type=\"submit\">Create Invoice</Button>\n      </div>\n    </form>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AAAA;AAAA;AAAA;AAMA;;;;;AAEe,SAAS,KAAK,EAAE,SAAS,EAAkC;IACxE,qBACE,8OAAC;;0BACC,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAM,SAAQ;gCAAW,WAAU;0CAAiC;;;;;;0CAGrE,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCACC,IAAG;wCACH,MAAK;wCACL,WAAU;wCACV,cAAa;;0DAEb,8OAAC;gDAAO,OAAM;gDAAG,QAAQ;0DAAC;;;;;;4CAGzB,UAAU,GAAG,CAAC,CAAC,yBACd,8OAAC;oDAAyB,OAAO,SAAS,EAAE;8DACzC,SAAS,IAAI;mDADH,SAAS,EAAE;;;;;;;;;;;kDAK5B,8OAAC,2NAAA,CAAA,iBAAc;wCAAC,WAAU;;;;;;;;;;;;;;;;;;kCAK9B,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAM,SAAQ;gCAAS,WAAU;0CAAiC;;;;;;0CAGnE,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CACC,IAAG;4CACH,MAAK;4CACL,MAAK;4CACL,MAAK;4CACL,aAAY;4CACZ,WAAU;;;;;;sDAEZ,8OAAC,mOAAA,CAAA,qBAAkB;4CAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;kCAMpC,8OAAC;;0CACC,8OAAC;gCAAO,WAAU;0CAAiC;;;;;;0CAGnD,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAI,WAAU;;8DACb,8OAAC;oDACC,IAAG;oDACH,MAAK;oDACL,MAAK;oDACL,OAAM;oDACN,WAAU;;;;;;8DAEZ,8OAAC;oDACC,SAAQ;oDACR,WAAU;;wDACX;sEACS,8OAAC,iNAAA,CAAA,YAAS;4DAAC,WAAU;;;;;;;;;;;;;;;;;;sDAGjC,8OAAC;4CAAI,WAAU;;8DACb,8OAAC;oDACC,IAAG;oDACH,MAAK;oDACL,MAAK;oDACL,OAAM;oDACN,WAAU;;;;;;8DAEZ,8OAAC;oDACC,SAAQ;oDACR,WAAU;;wDACX;sEACM,8OAAC,iNAAA,CAAA,YAAS;4DAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOtC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,4JAAA,CAAA,UAAI;wBACH,MAAK;wBACL,WAAU;kCACX;;;;;;kCAGD,8OAAC,2HAAA,CAAA,SAAM;wBAAC,MAAK;kCAAS;;;;;;;;;;;;;;;;;;AAI9B","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/nosifer_d0ad537.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"nosifer_d0ad537-module__-kDrfG__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 357, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/nosifer_d0ad537.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22fonts.ts%22,%22import%22:%22Nosifer%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22weight%22:%22400%22}],%22variableName%22:%22nosifer%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Nosifer', 'Nosifer Fallback'\",\n        fontWeight: 400,\nfontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,sJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,YAAY;QACpB,WAAW;IAEP;AACJ;AAEA,IAAI,sJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,sJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/alegreya_c449b61a.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"alegreya_c449b61a-module__PHpizq__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/alegreya_c449b61a.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22fonts.ts%22,%22import%22:%22Alegreya%22,%22arguments%22:[{%22subsets%22:[%22latin%22]}],%22variableName%22:%22alegreya%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Alegreya', 'Alegreya Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,wJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,wJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,wJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/frijole_e11d2e94.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"frijole_e11d2e94-module__Jf0JEa__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 418, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/frijole_e11d2e94.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22fonts.ts%22,%22import%22:%22Frijole%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22weight%22:%22400%22}],%22variableName%22:%22frijole%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Frijole', 'Frijole Fallback'\",\n        fontWeight: 400,\nfontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,uJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,YAAY;QACpB,WAAW;IAEP;AACJ;AAEA,IAAI,uJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,uJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 441, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/invoices/breadcrumbs.tsx"],"sourcesContent":["import { clsx } from 'clsx';\nimport Link from 'next/link';\nimport { alegreya } from '@/app/ui/fonts';\n\ninterface Breadcrumb {\n  label: string;\n  href: string;\n  active?: boolean;\n}\n\nexport default function Breadcrumbs({\n  breadcrumbs,\n}: {\n  breadcrumbs: Breadcrumb[];\n}) {\n  return (\n    <nav aria-label=\"Breadcrumb\" className=\"mb-6 block\">\n      <ol className={clsx(alegreya.className, 'flex text-xl md:text-2xl')}>\n        {breadcrumbs.map((breadcrumb, index) => (\n          <li\n            key={breadcrumb.href}\n            aria-current={breadcrumb.active}\n            className={clsx(\n              breadcrumb.active ? 'text-gray-900' : 'text-gray-500',\n            )}\n          >\n            <Link href={breadcrumb.href}>{breadcrumb.label}</Link>\n            {index < breadcrumbs.length - 1 ? (\n              <span className=\"mx-3 inline-block\">/</span>\n            ) : null}\n          </li>\n        ))}\n      </ol>\n    </nav>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;;;;;AAQe,SAAS,YAAY,EAClC,WAAW,EAGZ;IACC,qBACE,8OAAC;QAAI,cAAW;QAAa,WAAU;kBACrC,cAAA,8OAAC;YAAG,WAAW,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE,mLAAA,CAAA,WAAQ,CAAC,SAAS,EAAE;sBACrC,YAAY,GAAG,CAAC,CAAC,YAAY,sBAC5B,8OAAC;oBAEC,gBAAc,WAAW,MAAM;oBAC/B,WAAW,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EACZ,WAAW,MAAM,GAAG,kBAAkB;;sCAGxC,8OAAC,4JAAA,CAAA,UAAI;4BAAC,MAAM,WAAW,IAAI;sCAAG,WAAW,KAAK;;;;;;wBAC7C,QAAQ,YAAY,MAAM,GAAG,kBAC5B,8OAAC;4BAAK,WAAU;sCAAoB;;;;;mCAClC;;mBATC,WAAW,IAAI;;;;;;;;;;;;;;;AAehC","debugId":null}},
    {"offset": {"line": 595, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/lib/data.ts"],"sourcesContent":["import postgres from 'postgres';\nimport {\n  CustomerField,\n  CustomersTableType,\n  InvoiceForm,\n  InvoicesTable,\n  LatestInvoiceRaw,\n  Revenue,\n} from './definitions';\nimport { formatCurrency } from './utils';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\n// export async function fetchRevenue() {\n//   try {\n//     // Artificially delay a response for demo purposes.\n//     // Don't do this in production :)\n\n//     console.log('Fetching revenue data...');\n//     await new Promise((resolve) => setTimeout(resolve, 3000));\n\n//     const data = await sql<Revenue[]>`SELECT * FROM revenue`;\n\n//     console.log('Data fetch completed after 3 seconds.');\n\n//     return data;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch revenue data.');\n//   }\n// }\n\n// export async function fetchLatestInvoices() {\n//   try {\n//     const data = await sql<LatestInvoiceRaw[]>`\n//       SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id\n//       FROM invoices\n//       JOIN customers ON invoices.customer_id = customers.id\n//       ORDER BY invoices.date DESC\n//       LIMIT 5`;\n\n//     const latestInvoices = data.map((invoice) => ({\n//       ...invoice,\n//       amount: formatCurrency(invoice.amount),\n//     }));\n//     return latestInvoices;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch the latest invoices.');\n//   }\n// }\n\n// export async function fetchCardData() {\n//   try {\n//     // You can probably combine these into a single SQL query\n//     // However, we are intentionally splitting them to demonstrate\n//     // how to initialize multiple queries in parallel with JS.\n//     const invoiceCountPromise = sql`SELECT COUNT(*) FROM invoices`;\n//     const customerCountPromise = sql`SELECT COUNT(*) FROM customers`;\n//     const invoiceStatusPromise = sql`SELECT\n//          SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",\n//          SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"\n//          FROM invoices`;\n\n//     const data = await Promise.all([\n//       invoiceCountPromise,\n//       customerCountPromise,\n//       invoiceStatusPromise,\n//     ]);\n\n//     const numberOfInvoices = Number(data[0][0].count ?? '0');\n//     const numberOfCustomers = Number(data[1][0].count ?? '0');\n//     const totalPaidInvoices = formatCurrency(data[2][0].paid ?? '0');\n//     const totalPendingInvoices = formatCurrency(data[2][0].pending ?? '0');\n\n//     return {\n//       numberOfCustomers,\n//       numberOfInvoices,\n//       totalPaidInvoices,\n//       totalPendingInvoices,\n//     };\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch card data.');\n//   }\n// }\n\n// const ITEMS_PER_PAGE = 6;\n// export async function fetchFilteredInvoices(\n//   query: string,\n//   currentPage: number,\n// ) {\n//   const offset = (currentPage - 1) * ITEMS_PER_PAGE;\n\n//   try {\n//     const invoices = await sql<InvoicesTable[]>`\n//       SELECT\n//         invoices.id,\n//         invoices.amount,\n//         invoices.date,\n//         invoices.status,\n//         customers.name,\n//         customers.email,\n//         customers.image_url\n//       FROM invoices\n//       JOIN customers ON invoices.customer_id = customers.id\n//       WHERE\n//         customers.name ILIKE ${`%${query}%`} OR\n//         customers.email ILIKE ${`%${query}%`} OR\n//         invoices.amount::text ILIKE ${`%${query}%`} OR\n//         invoices.date::text ILIKE ${`%${query}%`} OR\n//         invoices.status ILIKE ${`%${query}%`}\n//       ORDER BY invoices.date DESC\n//       LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\n//     `;\n\n//     return invoices;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch invoices.');\n//   }\n// }\n\n// export async function fetchInvoicesPages(query: string) {\n//   try {\n//     const data = await sql`SELECT COUNT(*)\n//     FROM invoices\n//     JOIN customers ON invoices.customer_id = customers.id\n//     WHERE\n//       customers.name ILIKE ${`%${query}%`} OR\n//       customers.email ILIKE ${`%${query}%`} OR\n//       invoices.amount::text ILIKE ${`%${query}%`} OR\n//       invoices.date::text ILIKE ${`%${query}%`} OR\n//       invoices.status ILIKE ${`%${query}%`}\n//   `;\n\n//     const totalPages = Math.ceil(Number(data[0].count) / ITEMS_PER_PAGE);\n//     return totalPages;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch total number of invoices.');\n//   }\n// }\n\n// export async function fetchInvoiceById(id: string) {\n//   try {\n//     const data = await sql<InvoiceForm[]>`\n//       SELECT\n//         invoices.id,\n//         invoices.customer_id,\n//         invoices.amount,\n//         invoices.status\n//       FROM invoices\n//       WHERE invoices.id = ${id};\n//     `;\n\n//     const invoice = data.map((invoice) => ({\n//       ...invoice,\n//       // Convert amount from cents to dollars\n//       amount: invoice.amount / 100,\n//     }));\n\n//     return invoice[0];\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch invoice.');\n//   }\n// }\n\n// export async function fetchCustomers() {\n//   try {\n//     const customers = await sql<CustomerField[]>`\n//       SELECT\n//         id,\n//         name\n//       FROM customers\n//       ORDER BY name ASC\n//     `;\n\n//     return customers;\n//   } catch (err) {\n//     console.error('Database Error:', err);\n//     throw new Error('Failed to fetch all customers.');\n//   }\n// }\n\n// export async function fetchFilteredCustomers(query: string) {\n//   try {\n//     const data = await sql<CustomersTableType[]>`\n// \t\tSELECT\n// \t\t  customers.id,\n// \t\t  customers.name,\n// \t\t  customers.email,\n// \t\t  customers.image_url,\n// \t\t  COUNT(invoices.id) AS total_invoices,\n// \t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\n// \t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\n// \t\tFROM customers\n// \t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\n// \t\tWHERE\n// \t\t  customers.name ILIKE ${`%${query}%`} OR\n//         customers.email ILIKE ${`%${query}%`}\n// \t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\n// \t\tORDER BY customers.name ASC\n// \t  `;\n\n//     const customers = data.map((customer) => ({\n//       ...customer,\n//       total_pending: formatCurrency(customer.total_pending),\n//       total_paid: formatCurrency(customer.total_paid),\n//     }));\n\n//     return customers;\n//   } catch (err) {\n//     console.error('Database Error:', err);\n//     throw new Error('Failed to fetch customer table.');\n//   }\n// }\n\n\n\nexport async function fetchProduk(id: string) {\n  await new Promise((resolve) => setTimeout(resolve, 1500)); \n  try {\n    const produk = await sql<{\n      id_produk: number;\n      nama_produk: string;\n      harga_produk: number;\n    }[]>`\n      SELECT id_produk, nama_produk, harga_produk FROM produk ORDER BY id_produk ASC\n    `;\n\n    return produk;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch produk.');\n  }\n}\n\n\nexport async function fetchTransaksi() {\n  await new Promise((r) => setTimeout(r, 1500));\n  try {\n    const transaksi = await sql<{\n      id_transaksi: number;\n      id_produk: number;\n      nama_pembeli: string;\n      tanggal_transaksi: string;\n      total_harga: number;\n    }[]>`\n      SELECT * FROM transaksi ORDER BY tanggal_transaksi ASC\n    `;\n    return transaksi;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch transaksi.');\n  }\n}\n\nexport async function fetchAnalytics() {\n  await new Promise((resolve) => setTimeout(resolve, 1500)); \n  try {\n    // Query 1: total produk\n    const totalProdukRes = await sql`SELECT COUNT(*) FROM produk`;\n    const totalProduk = Number(totalProdukRes[0].count);\n\n    // Query 2: total revenue (jumlah total_harga dari transaksi)\n    const totalRevenueRes = await sql`SELECT SUM(total_harga) FROM transaksi`;\n    const totalRevenue = Number(totalRevenueRes[0].sum || 0);\n\n    // Query 3: produk paling sering muncul di transaksi\n    const mostSoldRes = await sql`\n      SELECT p.nama_produk, COUNT(t.id_produk) AS jumlah_terjual\n      FROM transaksi t\n      JOIN produk p ON t.id_produk = p.id_produk\n      GROUP BY p.nama_produk\n      ORDER BY jumlah_terjual DESC\n      LIMIT 1;\n    `;\n    const mostSold = mostSoldRes[0];\n\n    return {\n      totalProduk,\n      totalRevenue,\n      mostSold: mostSold?.nama_produk || '-',\n      jumlahTerjual: mostSold?.jumlah_terjual || 0,\n    };\n  } catch (err) {\n    console.error('DB Error (analytics):', err);\n    throw new Error('Failed to fetch analytics data.');\n  }\n}\n\nexport async function fetchPenjualanProduk() {\n  await new Promise((resolve) => setTimeout(resolve, 2000)); \n  try {\n    const data = await sql<{ nama_produk: string; jumlah_terjual: number }[]>`\n      SELECT p.nama_produk, COUNT(t.id_produk) AS jumlah_terjual\n      FROM transaksi t\n      JOIN produk p ON t.id_produk = p.id_produk\n      GROUP BY p.nama_produk\n      ORDER BY jumlah_terjual DESC\n    `;\n    return data;\n  } catch (err) {\n    console.error('DB Error (grafik):', err);\n    throw new Error('Gagal ambil data grafik penjualan.');\n  }\n}\n\nexport async function fetchProdukWithFoto() {\n  const produk = await sql<{\n    id_produk: number;\n    nama_produk: string;\n    harga_produk: number;\n    foto: string;\n  }[]>`SELECT * FROM menu ORDER BY id_produk ASC`;\n  return produk;\n}\n\n"],"names":[],"mappings":";;;;;;;AAAA;;AAWA,MAAM,MAAM,CAAA,GAAA,wIAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IAAE,KAAK;AAAU;AAkN1D,eAAe,YAAY,EAAU;IAC1C,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,IAAI;QACF,MAAM,SAAS,MAAM,GAIjB,CAAC;;IAEL,CAAC;QAED,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,IAAM,WAAW,GAAG;IACvC,IAAI;QACF,MAAM,YAAY,MAAM,GAMpB,CAAC;;IAEL,CAAC;QACD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,IAAI;QACF,wBAAwB;QACxB,MAAM,iBAAiB,MAAM,GAAG,CAAC,2BAA2B,CAAC;QAC7D,MAAM,cAAc,OAAO,cAAc,CAAC,EAAE,CAAC,KAAK;QAElD,6DAA6D;QAC7D,MAAM,kBAAkB,MAAM,GAAG,CAAC,sCAAsC,CAAC;QACzE,MAAM,eAAe,OAAO,eAAe,CAAC,EAAE,CAAC,GAAG,IAAI;QAEtD,oDAAoD;QACpD,MAAM,cAAc,MAAM,GAAG,CAAC;;;;;;;IAO9B,CAAC;QACD,MAAM,WAAW,WAAW,CAAC,EAAE;QAE/B,OAAO;YACL;YACA;YACA,UAAU,UAAU,eAAe;YACnC,eAAe,UAAU,kBAAkB;QAC7C;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,IAAI;QACF,MAAM,OAAO,MAAM,GAAsD,CAAC;;;;;;IAM1E,CAAC;QACD,OAAO;IACT,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,sBAAsB;QACpC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,SAAS,MAAM,GAKjB,CAAC,yCAAyC,CAAC;IAC/C,OAAO;AACT","debugId":null}},
    {"offset": {"line": 687, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/admin/dashboard/menu/create/page.tsx"],"sourcesContent":["import Form from \"@/app/ui/invoices/create-form\";\nimport Breadcrumbs from \"@/app/ui/invoices/breadcrumbs\";\nimport { fetchProduk } from \"@/app/lib/data\";\n\nexport default async function CreateInvoicePage() {\n    const menu = await fetchProduk(\"\");\n\n    return (\n        <main>\n            <Breadcrumbs\n                breadcrumbs={[\n                    { label: \"Invoices\", href: \"/dashboard/invoices\" },\n                    { label: \"Create Invoice\", href: \"/dashboard/invoices/create\", active: true },\n                ]}\n            />\n            <Form menu={menu} />\n        </main>\n    );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAEe,eAAe;IAC1B,MAAM,OAAO,MAAM,CAAA,GAAA,yHAAA,CAAA,cAAW,AAAD,EAAE;IAE/B,qBACI,8OAAC;;0BACG,8OAAC,4IAAA,CAAA,UAAW;gBACR,aAAa;oBACT;wBAAE,OAAO;wBAAY,MAAM;oBAAsB;oBACjD;wBAAE,OAAO;wBAAkB,MAAM;wBAA8B,QAAQ;oBAAK;iBAC/E;;;;;;0BAEL,8OAAC,+IAAA,CAAA,UAAI;gBAAC,MAAM;;;;;;;;;;;;AAGxB","debugId":null}}]
}