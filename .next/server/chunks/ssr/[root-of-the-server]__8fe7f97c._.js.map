{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/lib/data.ts"],"sourcesContent":["import postgres from 'postgres';\nimport { Produk } from './definitions';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\n// Perbaikan 1: Tambahkan explicit return type dengan Produk | null\nexport async function fetchProduk(id: string): Promise<Produk | null> {\n  try {\n    const numericId = Number(id);\n    if (isNaN(numericId)) {\n      throw new Error('Invalid ID format.');\n    }\n    const result = await sql<Produk[]>`\n      SELECT id_produk, nama_produk, harga_produk \n      FROM produk \n      WHERE id_produk = ${numericId}\n      LIMIT 1\n    `;\n    return result[0] || null;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch produk by ID.');\n  }\n}\n\n// Perbaikan 2: Tambahkan explicit return type\nexport async function fetchAllProduk(): Promise<Produk[]> {\n  try {\n    const result = await sql<Produk[]>`\n      SELECT id_produk, nama_produk, harga_produk \n      FROM produk \n      ORDER BY id_produk ASC\n    `;\n    return result;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch all produk.');\n  }\n}\n\n// Definisikan type untuk Transaksi\nexport type Transaksi = {\n  id_transaksi: number;\n  id_produk: number;\n  nama_pembeli: string;\n  tanggal_transaksi: string;\n  total_harga: number;\n  quantity: number;\n};\n\nexport async function fetchTransaksi(): Promise<Transaksi[]> {\n  try {\n    const transaksi = await sql<Transaksi[]>`\n      SELECT id_transaksi, id_produk, nama_pembeli, tanggal_transaksi, total_harga, quantity\n      FROM transaksi\n      ORDER BY tanggal_transaksi ASC\n    `;\n    return transaksi;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch transaksi.');\n  }\n}\n\n// Definisikan type untuk Analytics\nexport type Analytics = {\n  totalProduk: number;\n  totalRevenue: number;\n  mostSold: string;\n  jumlahTerjual: number;\n};\n\nexport async function fetchAnalytics(): Promise<Analytics> {\n  try {\n    // Query 1: total produk\n    const totalProdukRes = await sql<{ count: number }[]>`SELECT COUNT(*) AS count FROM produk`;\n    const totalProduk = Number(totalProdukRes[0].count);\n\n    // Query 2: total revenue\n    const totalRevenueRes = await sql<{ sum: number | null }[]>`SELECT SUM(total_harga) AS sum FROM transaksi`;\n    const totalRevenue = Number(totalRevenueRes[0].sum || 0);\n\n    // Query 3: produk paling sering muncul\n    const mostSoldRes = await sql<{\n      nama_produk: string;\n      jumlah_terjual: number;\n    }[]>`\n      SELECT p.nama_produk, COUNT(t.id_produk) AS jumlah_terjual\n      FROM transaksi t\n      JOIN produk p ON t.id_produk = p.id_produk\n      GROUP BY p.nama_produk\n      ORDER BY jumlah_terjual DESC\n      LIMIT 1;\n    `;\n    const mostSold = mostSoldRes[0];\n\n    return {\n      totalProduk,\n      totalRevenue,\n      mostSold: mostSold?.nama_produk || '-',\n      jumlahTerjual: mostSold?.jumlah_terjual || 0,\n    };\n  } catch (err) {\n    console.error('DB Error (analytics):', err);\n    throw new Error('Failed to fetch analytics data.');\n  }\n}\n\n// Definisikan type untuk PenjualanProduk\nexport type PenjualanProduk = {\n  nama_produk: string;\n  jumlah_terjual: number;\n};\n\nexport async function fetchPenjualanProduk(): Promise<PenjualanProduk[]> {\n  try {\n    const data = await sql<PenjualanProduk[]>`\n      SELECT p.nama_produk, COUNT(t.id_produk) AS jumlah_terjual\n      FROM transaksi t\n      JOIN produk p ON t.id_produk = p.id_produk\n      GROUP BY p.nama_produk\n      ORDER BY jumlah_terjual DESC\n    `;\n    return data;\n  } catch (err) {\n    console.error('DB Error (grafik):', err);\n    throw new Error('Gagal ambil data grafik penjualan.');\n  }\n}\n\n// Definisikan type untuk ProdukWithFoto\nexport type ProdukWithFoto = {\n  id_produk: number;\n  nama_produk: string;\n  harga_produk: number;\n  foto: string;\n};\n\nexport async function fetchProdukWithFoto(): Promise<ProdukWithFoto[]> {\n  try {\n    const produk = await sql<ProdukWithFoto[]>`SELECT * FROM produk ORDER BY id_produk ASC`;\n    return produk;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch produk with foto.');\n  }\n}\n\n// Definisikan type untuk CartData\nexport type CartData = {\n  id_produk: number;\n  nama_produk: string;\n  quantity: number;\n  harga_produk: number;\n  total_harga: number;\n};\n\nexport async function addToCart(cartData: CartData): Promise<any> {\n  try {\n    const result = await sql`\n      INSERT INTO cart (id_produk, nama_produk, quantity, harga_produk, total_harga, created_at)\n      VALUES (${cartData.id_produk}, ${cartData.nama_produk}, ${cartData.quantity}, ${cartData.harga_produk}, ${cartData.total_harga}, NOW())\n      RETURNING *\n    `;\n    return result[0] || null;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to add to cart');\n  }\n}\n\n// Definisikan type untuk TransaksiData\nexport type TransaksiData = {\n  id_produk: number;\n  nama_pembeli: string;\n  quantity: number;\n  total_harga: number;\n};\n\nexport async function createTransaksi(transaksiData: TransaksiData): Promise<any> {\n  try {\n    const result = await sql`\n      INSERT INTO transaksi (id_produk, nama_pembeli, tanggal_transaksi, total_harga, quantity)\n      VALUES (${transaksiData.id_produk}, ${transaksiData.nama_pembeli}, NOW(), ${transaksiData.total_harga}, ${transaksiData.quantity})\n      RETURNING *\n    `;\n    return result[0] || null;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to create transaction');\n  }\n}\n\n// Definisikan type untuk CartItem\nexport type CartItem = {\n  id_produk: number;\n  nama_produk: string;\n  quantity: number;\n  harga_produk: number;\n  total_harga: number;\n  created_at: string;\n  foto: string;\n};\n\n// Perbaikan 3: Fix query - gunakan konsisten antara 'menu' atau 'produk'\nexport async function fetchCartItems(): Promise<CartItem[]> {\n  try {\n    const result = await sql<CartItem[]>`\n      SELECT c.*, p.nama_produk, p.foto \n      FROM cart c\n      JOIN produk p ON c.id_produk = p.id_produk\n      ORDER BY c.created_at DESC\n    `;\n    return result;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch cart items');\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/analitik/analitiksection.tsx"],"sourcesContent":["export default function AnalitikSection({\n  data,\n}: {\n  data: {\n    totalProduk: number;\n    totalRevenue: number;\n    mostSold: string;\n    jumlahTerjual: number;\n  };\n}) {\n  const { totalProduk, totalRevenue, mostSold, jumlahTerjual } = data;\n\n  return (\n    <div className=\"grid gap-4 md:grid-cols-3\">\n      <div className=\"rounded-lg border bg-white p-4 shadow\">\n        <h2 className=\"text-lg font-semibold text-gray-700\">Total Produk</h2>\n        <p className=\"text-2xl font-bold text-red-800 mt-2\">{totalProduk}</p>\n      </div>\n\n      <div className=\"rounded-lg border bg-white p-4 shadow\">\n        <h2 className=\"text-lg font-semibold text-gray-700\">Total Revenue</h2>\n        <p className=\"text-2xl font-bold text-red-800 mt-2\">Rp {totalRevenue.toLocaleString()}</p>\n      </div>\n\n      <div className=\"rounded-lg border bg-white p-4 shadow\">\n        <h2 className=\"text-lg font-semibold text-gray-700\">Produk Terlaris</h2>\n        <p className=\"text-lg text-gray-800 mt-2\">{mostSold}</p>\n        <p className=\"text-sm text-gray-500\">Terjual {jumlahTerjual}x</p>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAe,SAAS,gBAAgB,EACtC,IAAI,EAQL;IACC,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG;IAE/D,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAsC;;;;;;kCACpD,8OAAC;wBAAE,WAAU;kCAAwC;;;;;;;;;;;;0BAGvD,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAsC;;;;;;kCACpD,8OAAC;wBAAE,WAAU;;4BAAuC;4BAAI,aAAa,cAAc;;;;;;;;;;;;;0BAGrF,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAsC;;;;;;kCACpD,8OAAC;wBAAE,WAAU;kCAA8B;;;;;;kCAC3C,8OAAC;wBAAE,WAAU;;4BAAwB;4BAAS;4BAAc;;;;;;;;;;;;;;;;;;;AAIpE","debugId":null}},
    {"offset": {"line": 358, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/admin/dashboard/analitik/analitikmetriksection.tsx"],"sourcesContent":["import { fetchAnalytics } from '@/app/lib/data';\nimport AnalitikSection from '@/app/ui/analitik/analitiksection';\n\nexport default async function AnalitikMetricSection() {\n  const analytics = await fetchAnalytics();\n  return <AnalitikSection data={analytics} />;\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,eAAe;IAC5B,MAAM,YAAY,MAAM,CAAA,GAAA,yHAAA,CAAA,iBAAc,AAAD;IACrC,qBAAO,8OAAC,gJAAA,CAAA,UAAe;QAAC,MAAM;;;;;;AAChC","debugId":null}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/analitik/grafikpenjualan.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/ui/analitik/grafikpenjualan.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/analitik/grafikpenjualan.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2S,GACxU,yEACA","debugId":null}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/analitik/grafikpenjualan.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/ui/analitik/grafikpenjualan.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/analitik/grafikpenjualan.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuR,GACpT,qDACA","debugId":null}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 421, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/admin/dashboard/analitik/grafiksection.tsx"],"sourcesContent":["import { fetchPenjualanProduk } from '@/app/lib/data';\nimport GrafikPenjualan from '@/app/ui/analitik/grafikpenjualan';\n\nexport default async function GrafikPenjualanSection() {\n  const data = await fetchPenjualanProduk();\n  return <GrafikPenjualan data={data} />;\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,eAAe;IAC5B,MAAM,OAAO,MAAM,CAAA,GAAA,yHAAA,CAAA,uBAAoB,AAAD;IACtC,qBAAO,8OAAC,gJAAA,CAAA,UAAe;QAAC,MAAM;;;;;;AAChC","debugId":null}},
    {"offset": {"line": 446, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/admin/dashboard/analitik/page.tsx"],"sourcesContent":["import { Suspense } from 'react';\r\nimport Loading from './loading';\r\nimport AnalitikMetricSection from './analitikmetriksection';\r\nimport GrafikPenjualanSection from './grafiksection';\r\n\r\nexport default function AnalitikPage() {\r\n  return (\r\n    <section className=\"p-6\">\r\n      <h1 className=\"text-3xl font-bold text-gray-800 mb-6\">Dashboard Analitik</h1>\r\n\r\n      <Suspense fallback={<Loading type=\"metrics\" />}>\r\n        <AnalitikMetricSection />\r\n      </Suspense>\r\n\r\n      <Suspense fallback={<Loading type=\"chart\" />}>\r\n        <GrafikPenjualanSection />\r\n      </Suspense>\r\n    </section>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAQ,WAAU;;0BACjB,8OAAC;gBAAG,WAAU;0BAAwC;;;;;;0BAEtD,8OAAC,qMAAA,CAAA,WAAQ;gBAAC,wBAAU,8OAAC,wJAAA,CAAA,UAAO;oBAAC,MAAK;;;;;;0BAChC,cAAA,8OAAC,sKAAA,CAAA,UAAqB;;;;;;;;;;0BAGxB,8OAAC,qMAAA,CAAA,WAAQ;gBAAC,wBAAU,8OAAC,wJAAA,CAAA,UAAO;oBAAC,MAAK;;;;;;0BAChC,cAAA,8OAAC,8JAAA,CAAA,UAAsB;;;;;;;;;;;;;;;;AAI/B","debugId":null}}]
}