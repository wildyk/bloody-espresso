{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\nimport postgres from 'postgres';\nimport { z } from 'zod';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\nconst MenuSchema = z.object({\n  id: z.string(),\n  nama_produk: z.string(),\n  harga_produk: z.number(),\n});\n\nconst TransaksiSchema = z.object({\n  id: z.string(),\n  id_produk: z.string(),\n  nama_pembeli: z.string(),\n  total_harga: z.number(),\n  tanggal_transaksi: z.string(),\n});\n\nconst CreateMenu = MenuSchema.omit({ id: true });\nconst UpdateMenu = MenuSchema.omit({ id: true });\nconst CreateTransaksi = TransaksiSchema.omit({ id: true, tanggal_transaksi: true });\n\nexport async function createMenu(formData: FormData) {\n  const { nama_produk, harga_produk } = CreateMenu.parse({\n    nama_produk: formData.get('nama_produk'),\n    harga_produk: Number(formData.get('harga_produk')),\n  });\n\n  await sql`\n    INSERT INTO produk (nama_produk, harga_produk)\n    VALUES (${nama_produk}, ${harga_produk})\n  `;\n\n  revalidatePath('/admin/dashboard/menu');\n  redirect('/admin/dashboard/menu');\n}\n\nexport async function updateMenu(id: string, formData: FormData) {\n  const { nama_produk, harga_produk } = UpdateMenu.parse({\n    nama_produk: formData.get('nama_produk'),\n    harga_produk: Number(formData.get('harga_produk')),\n  });\n\n  await sql`\n    UPDATE produk\n    SET nama_produk = ${nama_produk}, harga_produk = ${harga_produk}\n    WHERE id_produk = ${id}\n  `;\n\n  revalidatePath('/admin/dashboard/menu');\n  redirect('/admin/dashboard/menu');\n}\n\nexport async function deleteMenu(id: string) {\n  await sql`DELETE FROM produk WHERE id_produk = ${id}`;\n  revalidatePath('/admin/dashboard/menu');\n}\n\nexport async function createTransaksi(formData: FormData) {\n  const { id_produk, nama_pembeli, total_harga } = CreateTransaksi.parse({\n    id_produk: formData.get('id_produk'),\n    nama_pembeli: formData.get('nama_pembeli'),\n    total_harga: Number(formData.get('total_harga')),\n  });\n\n  const tanggal_transaksi = new Date().toISOString().split('T')[0];\n\n  await sql`\n    INSERT INTO transaksi (id_produk, nama_pembeli, total_harga, tanggal_transaksi)\n    VALUES (${id_produk}, ${nama_pembeli}, ${total_harga}, ${tanggal_transaksi})\n  `;\n\n  revalidatePath('/admin/dashboard/transaksi');\n  redirect('/admin/dashboard/transaksi');\n}\n\n"],"names":[],"mappings":";;;;;;;;AAEA;AACA;AAAA;AACA;AACA;AAAA;;;;;;;;AAEA,MAAM,MAAM,CAAA,GAAA,wIAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IAAE,KAAK;AAAU;AAEjE,MAAM,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,IAAI,iLAAA,CAAA,IAAC,CAAC,MAAM;IACZ,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM;IACrB,cAAc,iLAAA,CAAA,IAAC,CAAC,MAAM;AACxB;AAEA,MAAM,kBAAkB,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/B,IAAI,iLAAA,CAAA,IAAC,CAAC,MAAM;IACZ,WAAW,iLAAA,CAAA,IAAC,CAAC,MAAM;IACnB,cAAc,iLAAA,CAAA,IAAC,CAAC,MAAM;IACtB,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM;IACrB,mBAAmB,iLAAA,CAAA,IAAC,CAAC,MAAM;AAC7B;AAEA,MAAM,aAAa,WAAW,IAAI,CAAC;IAAE,IAAI;AAAK;AAC9C,MAAM,aAAa,WAAW,IAAI,CAAC;IAAE,IAAI;AAAK;AAC9C,MAAM,kBAAkB,gBAAgB,IAAI,CAAC;IAAE,IAAI;IAAM,mBAAmB;AAAK;AAE1E,eAAe,WAAW,QAAkB;IACjD,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,WAAW,KAAK,CAAC;QACrD,aAAa,SAAS,GAAG,CAAC;QAC1B,cAAc,OAAO,SAAS,GAAG,CAAC;IACpC;IAEA,MAAM,GAAG,CAAC;;YAEA,EAAE,YAAY,EAAE,EAAE,aAAa;EACzC,CAAC;IAED,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX;AAEO,eAAe,WAAW,EAAU,EAAE,QAAkB;IAC7D,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,WAAW,KAAK,CAAC;QACrD,aAAa,SAAS,GAAG,CAAC;QAC1B,cAAc,OAAO,SAAS,GAAG,CAAC;IACpC;IAEA,MAAM,GAAG,CAAC;;sBAEU,EAAE,YAAY,iBAAiB,EAAE,aAAa;sBAC9C,EAAE,GAAG;EACzB,CAAC;IAED,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX;AAEO,eAAe,WAAW,EAAU;IACzC,MAAM,GAAG,CAAC,qCAAqC,EAAE,GAAG,CAAC;IACrD,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;AACjB;AAEO,eAAe,gBAAgB,QAAkB;IACtD,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,gBAAgB,KAAK,CAAC;QACrE,WAAW,SAAS,GAAG,CAAC;QACxB,cAAc,SAAS,GAAG,CAAC;QAC3B,aAAa,OAAO,SAAS,GAAG,CAAC;IACnC;IAEA,MAAM,oBAAoB,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IAEhE,MAAM,GAAG,CAAC;;YAEA,EAAE,UAAU,EAAE,EAAE,aAAa,EAAE,EAAE,YAAY,EAAE,EAAE,kBAAkB;EAC7E,CAAC;IAED,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX;;;IApDsB;IAeA;IAgBA;IAKA;;AApCA,+OAAA;AAeA,+OAAA;AAgBA,+OAAA;AAKA,+OAAA","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/.next-internal/server/app/admin/dashboard/transaksi/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {deleteMenu as '4092bf8249b5cf83282f76425a4f104d078960b79c'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/lib/data.ts"],"sourcesContent":["import postgres from 'postgres';\nimport {\n  CustomerField,\n  CustomersTableType,\n  InvoiceForm,\n  InvoicesTable,\n  LatestInvoiceRaw,\n  Revenue,\n} from './definitions';\nimport { formatCurrency } from './utils';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\n// export async function fetchRevenue() {\n//   try {\n//     // Artificially delay a response for demo purposes.\n//     // Don't do this in production :)\n\n//     console.log('Fetching revenue data...');\n//     await new Promise((resolve) => setTimeout(resolve, 3000));\n\n//     const data = await sql<Revenue[]>`SELECT * FROM revenue`;\n\n//     console.log('Data fetch completed after 3 seconds.');\n\n//     return data;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch revenue data.');\n//   }\n// }\n\n// export async function fetchLatestInvoices() {\n//   try {\n//     const data = await sql<LatestInvoiceRaw[]>`\n//       SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id\n//       FROM invoices\n//       JOIN customers ON invoices.customer_id = customers.id\n//       ORDER BY invoices.date DESC\n//       LIMIT 5`;\n\n//     const latestInvoices = data.map((invoice) => ({\n//       ...invoice,\n//       amount: formatCurrency(invoice.amount),\n//     }));\n//     return latestInvoices;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch the latest invoices.');\n//   }\n// }\n\n// export async function fetchCardData() {\n//   try {\n//     // You can probably combine these into a single SQL query\n//     // However, we are intentionally splitting them to demonstrate\n//     // how to initialize multiple queries in parallel with JS.\n//     const invoiceCountPromise = sql`SELECT COUNT(*) FROM invoices`;\n//     const customerCountPromise = sql`SELECT COUNT(*) FROM customers`;\n//     const invoiceStatusPromise = sql`SELECT\n//          SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",\n//          SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"\n//          FROM invoices`;\n\n//     const data = await Promise.all([\n//       invoiceCountPromise,\n//       customerCountPromise,\n//       invoiceStatusPromise,\n//     ]);\n\n//     const numberOfInvoices = Number(data[0][0].count ?? '0');\n//     const numberOfCustomers = Number(data[1][0].count ?? '0');\n//     const totalPaidInvoices = formatCurrency(data[2][0].paid ?? '0');\n//     const totalPendingInvoices = formatCurrency(data[2][0].pending ?? '0');\n\n//     return {\n//       numberOfCustomers,\n//       numberOfInvoices,\n//       totalPaidInvoices,\n//       totalPendingInvoices,\n//     };\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch card data.');\n//   }\n// }\n\n// const ITEMS_PER_PAGE = 6;\n// export async function fetchFilteredInvoices(\n//   query: string,\n//   currentPage: number,\n// ) {\n//   const offset = (currentPage - 1) * ITEMS_PER_PAGE;\n\n//   try {\n//     const invoices = await sql<InvoicesTable[]>`\n//       SELECT\n//         invoices.id,\n//         invoices.amount,\n//         invoices.date,\n//         invoices.status,\n//         customers.name,\n//         customers.email,\n//         customers.image_url\n//       FROM invoices\n//       JOIN customers ON invoices.customer_id = customers.id\n//       WHERE\n//         customers.name ILIKE ${`%${query}%`} OR\n//         customers.email ILIKE ${`%${query}%`} OR\n//         invoices.amount::text ILIKE ${`%${query}%`} OR\n//         invoices.date::text ILIKE ${`%${query}%`} OR\n//         invoices.status ILIKE ${`%${query}%`}\n//       ORDER BY invoices.date DESC\n//       LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\n//     `;\n\n//     return invoices;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch invoices.');\n//   }\n// }\n\n// export async function fetchInvoicesPages(query: string) {\n//   try {\n//     const data = await sql`SELECT COUNT(*)\n//     FROM invoices\n//     JOIN customers ON invoices.customer_id = customers.id\n//     WHERE\n//       customers.name ILIKE ${`%${query}%`} OR\n//       customers.email ILIKE ${`%${query}%`} OR\n//       invoices.amount::text ILIKE ${`%${query}%`} OR\n//       invoices.date::text ILIKE ${`%${query}%`} OR\n//       invoices.status ILIKE ${`%${query}%`}\n//   `;\n\n//     const totalPages = Math.ceil(Number(data[0].count) / ITEMS_PER_PAGE);\n//     return totalPages;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch total number of invoices.');\n//   }\n// }\n\n// export async function fetchInvoiceById(id: string) {\n//   try {\n//     const data = await sql<InvoiceForm[]>`\n//       SELECT\n//         invoices.id,\n//         invoices.customer_id,\n//         invoices.amount,\n//         invoices.status\n//       FROM invoices\n//       WHERE invoices.id = ${id};\n//     `;\n\n//     const invoice = data.map((invoice) => ({\n//       ...invoice,\n//       // Convert amount from cents to dollars\n//       amount: invoice.amount / 100,\n//     }));\n\n//     return invoice[0];\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch invoice.');\n//   }\n// }\n\n// export async function fetchCustomers() {\n//   try {\n//     const customers = await sql<CustomerField[]>`\n//       SELECT\n//         id,\n//         name\n//       FROM customers\n//       ORDER BY name ASC\n//     `;\n\n//     return customers;\n//   } catch (err) {\n//     console.error('Database Error:', err);\n//     throw new Error('Failed to fetch all customers.');\n//   }\n// }\n\n// export async function fetchFilteredCustomers(query: string) {\n//   try {\n//     const data = await sql<CustomersTableType[]>`\n// \t\tSELECT\n// \t\t  customers.id,\n// \t\t  customers.name,\n// \t\t  customers.email,\n// \t\t  customers.image_url,\n// \t\t  COUNT(invoices.id) AS total_invoices,\n// \t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\n// \t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\n// \t\tFROM customers\n// \t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\n// \t\tWHERE\n// \t\t  customers.name ILIKE ${`%${query}%`} OR\n//         customers.email ILIKE ${`%${query}%`}\n// \t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\n// \t\tORDER BY customers.name ASC\n// \t  `;\n\n//     const customers = data.map((customer) => ({\n//       ...customer,\n//       total_pending: formatCurrency(customer.total_pending),\n//       total_paid: formatCurrency(customer.total_paid),\n//     }));\n\n//     return customers;\n//   } catch (err) {\n//     console.error('Database Error:', err);\n//     throw new Error('Failed to fetch customer table.');\n//   }\n// }\n\n\n\nexport async function fetchProduk(id: string) {\n  try {\n    const result = await sql<{\n      id_produk: number;\n      nama_produk: string;\n      harga_produk: number;\n    }[]>`\n      SELECT id_produk, nama_produk, harga_produk \n      FROM produk \n      WHERE id_produk = ${id}\n      LIMIT 1\n    `;\n\n    return result[0]; \n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch produk by ID.');\n  }\n  \n}\nexport async function fetchAllProduk() {\n  try {\n    const result = await sql`\n      SELECT id_produk, nama_produk, harga_produk \n      FROM produk \n      ORDER BY id_produk ASC\n    `;\n    return result;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch all produk.');\n  }\n}\n\n\n\nexport async function fetchTransaksi() {\n  await new Promise((r) => setTimeout(r, 1500));\n  try {\n    const transaksi = await sql<{\n      id_transaksi: number;\n      id_produk: number;\n      nama_pembeli: string;\n      tanggal_transaksi: string;\n      total_harga: number;\n    }[]>`\n      SELECT * FROM transaksi ORDER BY tanggal_transaksi ASC\n    `;\n    return transaksi;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch transaksi.');\n  }\n}\n\nexport async function fetchAnalytics() {\n  await new Promise((resolve) => setTimeout(resolve, 1500)); \n  try {\n    // Query 1: total produk\n    const totalProdukRes = await sql`SELECT COUNT(*) FROM produk`;\n    const totalProduk = Number(totalProdukRes[0].count);\n\n    // Query 2: total revenue (jumlah total_harga dari transaksi)\n    const totalRevenueRes = await sql`SELECT SUM(total_harga) FROM transaksi`;\n    const totalRevenue = Number(totalRevenueRes[0].sum || 0);\n\n    // Query 3: produk paling sering muncul di transaksi\n    const mostSoldRes = await sql`\n      SELECT p.nama_produk, COUNT(t.id_produk) AS jumlah_terjual\n      FROM transaksi t\n      JOIN produk p ON t.id_produk = p.id_produk\n      GROUP BY p.nama_produk\n      ORDER BY jumlah_terjual DESC\n      LIMIT 1;\n    `;\n    const mostSold = mostSoldRes[0];\n\n    return {\n      totalProduk,\n      totalRevenue,\n      mostSold: mostSold?.nama_produk || '-',\n      jumlahTerjual: mostSold?.jumlah_terjual || 0,\n    };\n  } catch (err) {\n    console.error('DB Error (analytics):', err);\n    throw new Error('Failed to fetch analytics data.');\n  }\n}\n\nexport async function fetchPenjualanProduk() {\n  await new Promise((resolve) => setTimeout(resolve, 2000)); \n  try {\n    const data = await sql<{ nama_produk: string; jumlah_terjual: number }[]>`\n      SELECT p.nama_produk, COUNT(t.id_produk) AS jumlah_terjual\n      FROM transaksi t\n      JOIN produk p ON t.id_produk = p.id_produk\n      GROUP BY p.nama_produk\n      ORDER BY jumlah_terjual DESC\n    `;\n    return data;\n  } catch (err) {\n    console.error('DB Error (grafik):', err);\n    throw new Error('Gagal ambil data grafik penjualan.');\n  }\n}\n\nexport async function fetchProdukWithFoto() {\n  const produk = await sql<{\n    id_produk: number;\n    nama_produk: string;\n    harga_produk: number;\n    foto: string;\n  }[]>`SELECT * FROM menu ORDER BY id_produk ASC`;\n  return produk;\n}\n\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAWA,MAAM,MAAM,CAAA,GAAA,wIAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IAAE,KAAK;AAAU;AAkN1D,eAAe,YAAY,EAAU;IAC1C,IAAI;QACF,MAAM,SAAS,MAAM,GAIjB,CAAC;;;wBAGe,EAAE,GAAG;;IAEzB,CAAC;QAED,OAAO,MAAM,CAAC,EAAE;IAClB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AAEF;AACO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,GAAG,CAAC;;;;IAIzB,CAAC;QACD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AACF;AAIO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,IAAM,WAAW,GAAG;IACvC,IAAI;QACF,MAAM,YAAY,MAAM,GAMpB,CAAC;;IAEL,CAAC;QACD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,IAAI;QACF,wBAAwB;QACxB,MAAM,iBAAiB,MAAM,GAAG,CAAC,2BAA2B,CAAC;QAC7D,MAAM,cAAc,OAAO,cAAc,CAAC,EAAE,CAAC,KAAK;QAElD,6DAA6D;QAC7D,MAAM,kBAAkB,MAAM,GAAG,CAAC,sCAAsC,CAAC;QACzE,MAAM,eAAe,OAAO,eAAe,CAAC,EAAE,CAAC,GAAG,IAAI;QAEtD,oDAAoD;QACpD,MAAM,cAAc,MAAM,GAAG,CAAC;;;;;;;IAO9B,CAAC;QACD,MAAM,WAAW,WAAW,CAAC,EAAE;QAE/B,OAAO;YACL;YACA;YACA,UAAU,UAAU,eAAe;YACnC,eAAe,UAAU,kBAAkB;QAC7C;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,IAAI;QACF,MAAM,OAAO,MAAM,GAAsD,CAAC;;;;;;IAM1E,CAAC;QACD,OAAO;IACT,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,sBAAsB;QACpC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,SAAS,MAAM,GAKjB,CAAC,yCAAyC,CAAC;IAC/C,OAAO;AACT","debugId":null}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/nosifer_d0ad537.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"nosifer_d0ad537-module__-kDrfG__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/nosifer_d0ad537.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22fonts.ts%22,%22import%22:%22Nosifer%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22weight%22:%22400%22}],%22variableName%22:%22nosifer%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Nosifer', 'Nosifer Fallback'\",\n        fontWeight: 400,\nfontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,sJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,YAAY;QACpB,WAAW;IAEP;AACJ;AAEA,IAAI,sJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,sJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/alegreya_c449b61a.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"alegreya_c449b61a-module__PHpizq__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 380, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/alegreya_c449b61a.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22fonts.ts%22,%22import%22:%22Alegreya%22,%22arguments%22:[{%22subsets%22:[%22latin%22]}],%22variableName%22:%22alegreya%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Alegreya', 'Alegreya Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,wJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,wJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,wJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 401, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/frijole_e11d2e94.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"frijole_e11d2e94-module__Jf0JEa__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/frijole_e11d2e94.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22fonts.ts%22,%22import%22:%22Frijole%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22weight%22:%22400%22}],%22variableName%22:%22frijole%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Frijole', 'Frijole Fallback'\",\n        fontWeight: 400,\nfontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,uJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,YAAY;QACpB,WAAW;IAEP;AACJ;AAEA,IAAI,uJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,uJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 470, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/transaksi/table.tsx"],"sourcesContent":["import { fetchTransaksi } from '@/app/lib/data';\nimport { alegreya } from '@/app/ui/fonts';\n\nexport default async function TransaksiTable({\n  searchParams,\n}: {\n  searchParams: { query?: string; page?: string };\n}) {\n  const query = searchParams.query?.toLowerCase() || '';\n  const currentPage = parseInt(searchParams.page || '1', 10);\n  const itemsPerPage = 5;\n\n  const transaksiList = await fetchTransaksi();\n\n  const filtered = transaksiList.filter((transaksi) =>\n    transaksi.nama_pembeli.toLowerCase().includes(query) ||\n    transaksi.id_transaksi.toString().includes(query) ||\n    transaksi.id_produk.toString().includes(query)\n  );\n\n  const totalItems = filtered.length;\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const paginated = filtered.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  return (\n    <>\n      <div className=\"mt-8 flow-root\">\n        <div className=\"inline-block min-w-full align-middle\">\n          <div className=\"overflow-hidden rounded-xl border border-gray-200 bg-white\">\n            {/* Table Header */}\n            <div className=\"border-b border-gray-200 bg-red-900 px-6 py-4\">\n              <h3 className=\"text-xl font-semibold text-white\">Daftar Transaksi</h3>\n              <p className=\"text-white text-sm mt-1\">Total {totalItems} transaksi ditemukan</p>\n            </div>\n            \n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50 border-b border-gray-200\">\n                <tr>\n                  <th scope=\"col\" className={`${alegreya.className} px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider`}>\n                    ID Transaksi\n                  </th>\n                  <th scope=\"col\" className={`${alegreya.className} px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider`}>\n                    ID Produk\n                  </th>\n                  <th scope=\"col\" className={`${alegreya.className} px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider`}>\n                    Nama Pembeli\n                  </th>\n                  <th scope=\"col\" className={`${alegreya.className} px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider`}>\n                    Tanggal\n                  </th>\n                  <th scope=\"col\" className={`${alegreya.className} px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider`}>\n                    Total Harga\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {paginated.map((transaksi) => (\n                  <tr\n                    key={transaksi.id_transaksi}\n                    className=\"hover:bg-gray-50 transition-colors duration-200\"\n                  >\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-gray-900\">\n                        {transaksi.id_transaksi}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-gray-900\">\n                        {transaksi.id_produk}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-semibold text-gray-900\">\n                        {transaksi.nama_pembeli}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 border border-blue-200\">\n                        {new Date(transaksi.tanggal_transaksi).toLocaleDateString('id-ID')}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800 border border-green-200\">\n                        Rp {transaksi.total_harga.toLocaleString('id-ID')}\n                      </span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n\n            {/* Empty State */}\n            {paginated.length === 0 && (\n              <div className=\"text-center py-12 border-t border-gray-200\">\n                <div className=\"mx-auto h-24 w-24 text-gray-400\">\n                  <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01\"></path>\n                  </svg>\n                </div>\n                <h3 className=\"mt-4 text-lg font-medium text-gray-900\">Tidak ada transaksi ditemukan</h3>\n                <p className=\"mt-2 text-sm text-gray-500\">\n                  {query ? `Tidak ada hasil untuk pencarian \"${query}\"` : 'Belum ada transaksi yang dicatat'}\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Enhanced Pagination */}\n      {totalPages > 1 && (\n        <div className=\"mt-8 flex flex-col sm:flex-row items-center justify-between gap-4 p-4 bg-white border border-gray-200 rounded-lg\">\n          <div className=\"text-sm text-gray-700\">\n            Menampilkan <span className=\"font-medium\">{(currentPage - 1) * itemsPerPage + 1}</span> sampai{' '}\n            <span className=\"font-medium\">{Math.min(currentPage * itemsPerPage, totalItems)}</span> dari{' '}\n            <span className=\"font-medium\">{totalItems}</span> transaksi\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Previous Button */}\n            {currentPage > 1 && (\n              <a\n                href={`?${new URLSearchParams({\n                  ...Object.fromEntries(Object.entries(searchParams).filter(([key]) => key !== 'page')),\n                  page: String(currentPage - 1)\n                }).toString()}`}\n                className=\"relative inline-flex items-center rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-500 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 transition-colors duration-200\"\n              >\n                <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                </svg>\n                <span className=\"ml-1 hidden sm:block\">Sebelumnya</span>\n              </a>\n            )}\n\n            {/* Page Numbers */}\n            <div className=\"flex items-center gap-1\">\n              {[...Array(totalPages)].map((_, i) => {\n                const page = i + 1;\n                const params = new URLSearchParams();\n\n                Object.entries(searchParams).forEach(([key, value]) => {\n                  if (value && key !== 'page') params.set(key, value);\n                });\n\n                params.set('page', String(page));\n                const href = `?${params.toString()}`;\n\n                return (\n                  <a\n                    key={page}\n                    href={href}\n                    className={`relative inline-flex items-center px-4 py-2 text-sm font-medium border transition-colors duration-200 ${\n                      page === currentPage\n                        ? 'z-10 bg-red-900 text-white focus:z-20 focus-visible:outline-offset-2 focus-visible:outline-red-600 rounded-md'\n                        : 'text-gray-900 border-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 rounded-md bg-white'\n                    }`}\n                  >\n                    {page}\n                  </a>\n                );\n              })}\n            </div>\n\n            {/* Next Button */}\n            {currentPage < totalPages && (\n              <a\n                href={`?${new URLSearchParams({\n                  ...Object.fromEntries(Object.entries(searchParams).filter(([key]) => key !== 'page')),\n                  page: String(currentPage + 1)\n                }).toString()}`}\n                className=\"relative inline-flex items-center rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-500 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 transition-colors duration-200\"\n              >\n                <span className=\"mr-1 hidden sm:block\">Selanjutnya</span>\n                <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                </svg>\n              </a>\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;;AAEe,eAAe,eAAe,EAC3C,YAAY,EAGb;IACC,MAAM,QAAQ,aAAa,KAAK,EAAE,iBAAiB;IACnD,MAAM,cAAc,SAAS,aAAa,IAAI,IAAI,KAAK;IACvD,MAAM,eAAe;IAErB,MAAM,gBAAgB,MAAM,CAAA,GAAA,yHAAA,CAAA,iBAAc,AAAD;IAEzC,MAAM,WAAW,cAAc,MAAM,CAAC,CAAC,YACrC,UAAU,YAAY,CAAC,WAAW,GAAG,QAAQ,CAAC,UAC9C,UAAU,YAAY,CAAC,QAAQ,GAAG,QAAQ,CAAC,UAC3C,UAAU,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAG1C,MAAM,aAAa,SAAS,MAAM;IAClC,MAAM,aAAa,KAAK,IAAI,CAAC,aAAa;IAC1C,MAAM,YAAY,SAAS,KAAK,CAC9B,CAAC,cAAc,CAAC,IAAI,cACpB,cAAc;IAGhB,qBACE;;0BACE,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;;0CAEb,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAG,WAAU;kDAAmC;;;;;;kDACjD,8OAAC;wCAAE,WAAU;;4CAA0B;4CAAO;4CAAW;;;;;;;;;;;;;0CAG3D,8OAAC;gCAAM,WAAU;;kDACf,8OAAC;wCAAM,WAAU;kDACf,cAAA,8OAAC;;8DACC,8OAAC;oDAAG,OAAM;oDAAM,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,+EAA+E,CAAC;8DAAE;;;;;;8DAGnI,8OAAC;oDAAG,OAAM;oDAAM,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,+EAA+E,CAAC;8DAAE;;;;;;8DAGnI,8OAAC;oDAAG,OAAM;oDAAM,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,+EAA+E,CAAC;8DAAE;;;;;;8DAGnI,8OAAC;oDAAG,OAAM;oDAAM,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,+EAA+E,CAAC;8DAAE;;;;;;8DAGnI,8OAAC;oDAAG,OAAM;oDAAM,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,+EAA+E,CAAC;8DAAE;;;;;;;;;;;;;;;;;kDAKvI,8OAAC;wCAAM,WAAU;kDACd,UAAU,GAAG,CAAC,CAAC,0BACd,8OAAC;gDAEC,WAAU;;kEAEV,8OAAC;wDAAG,WAAU;kEACZ,cAAA,8OAAC;4DAAI,WAAU;sEACZ,UAAU,YAAY;;;;;;;;;;;kEAG3B,8OAAC;wDAAG,WAAU;kEACZ,cAAA,8OAAC;4DAAI,WAAU;sEACZ,UAAU,SAAS;;;;;;;;;;;kEAGxB,8OAAC;wDAAG,WAAU;kEACZ,cAAA,8OAAC;4DAAI,WAAU;sEACZ,UAAU,YAAY;;;;;;;;;;;kEAG3B,8OAAC;wDAAG,WAAU;kEACZ,cAAA,8OAAC;4DAAK,WAAU;sEACb,IAAI,KAAK,UAAU,iBAAiB,EAAE,kBAAkB,CAAC;;;;;;;;;;;kEAG9D,8OAAC;wDAAG,WAAU;kEACZ,cAAA,8OAAC;4DAAK,WAAU;;gEAA0H;gEACpI,UAAU,WAAW,CAAC,cAAc,CAAC;;;;;;;;;;;;;+CAzBxC,UAAU,YAAY;;;;;;;;;;;;;;;;4BAkClC,UAAU,MAAM,KAAK,mBACpB,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAI,WAAU;kDACb,cAAA,8OAAC;4CAAI,MAAK;4CAAO,QAAO;4CAAe,SAAQ;4CAAY,OAAM;sDAC/D,cAAA,8OAAC;gDAAK,eAAc;gDAAQ,gBAAe;gDAAQ,aAAa;gDAAG,GAAE;;;;;;;;;;;;;;;;kDAGzE,8OAAC;wCAAG,WAAU;kDAAyC;;;;;;kDACvD,8OAAC;wCAAE,WAAU;kDACV,QAAQ,CAAC,iCAAiC,EAAE,MAAM,CAAC,CAAC,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;YASnE,aAAa,mBACZ,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;4BAAwB;0CACzB,8OAAC;gCAAK,WAAU;0CAAe,CAAC,cAAc,CAAC,IAAI,eAAe;;;;;;4BAAS;4BAAQ;0CAC/F,8OAAC;gCAAK,WAAU;0CAAe,KAAK,GAAG,CAAC,cAAc,cAAc;;;;;;4BAAmB;4BAAM;0CAC7F,8OAAC;gCAAK,WAAU;0CAAe;;;;;;4BAAkB;;;;;;;kCAGnD,8OAAC;wBAAI,WAAU;;4BAEZ,cAAc,mBACb,8OAAC;gCACC,MAAM,CAAC,CAAC,EAAE,IAAI,gBAAgB;oCAC5B,GAAG,OAAO,WAAW,CAAC,OAAO,OAAO,CAAC,cAAc,MAAM,CAAC,CAAC,CAAC,IAAI,GAAK,QAAQ,QAAQ;oCACrF,MAAM,OAAO,cAAc;gCAC7B,GAAG,QAAQ,IAAI;gCACf,WAAU;;kDAEV,8OAAC;wCAAI,WAAU;wCAAU,MAAK;wCAAO,QAAO;wCAAe,SAAQ;kDACjE,cAAA,8OAAC;4CAAK,eAAc;4CAAQ,gBAAe;4CAAQ,aAAa;4CAAG,GAAE;;;;;;;;;;;kDAEvE,8OAAC;wCAAK,WAAU;kDAAuB;;;;;;;;;;;;0CAK3C,8OAAC;gCAAI,WAAU;0CACZ;uCAAI,MAAM;iCAAY,CAAC,GAAG,CAAC,CAAC,GAAG;oCAC9B,MAAM,OAAO,IAAI;oCACjB,MAAM,SAAS,IAAI;oCAEnB,OAAO,OAAO,CAAC,cAAc,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM;wCAChD,IAAI,SAAS,QAAQ,QAAQ,OAAO,GAAG,CAAC,KAAK;oCAC/C;oCAEA,OAAO,GAAG,CAAC,QAAQ,OAAO;oCAC1B,MAAM,OAAO,CAAC,CAAC,EAAE,OAAO,QAAQ,IAAI;oCAEpC,qBACE,8OAAC;wCAEC,MAAM;wCACN,WAAW,CAAC,sGAAsG,EAChH,SAAS,cACL,kHACA,wGACJ;kDAED;uCARI;;;;;gCAWX;;;;;;4BAID,cAAc,4BACb,8OAAC;gCACC,MAAM,CAAC,CAAC,EAAE,IAAI,gBAAgB;oCAC5B,GAAG,OAAO,WAAW,CAAC,OAAO,OAAO,CAAC,cAAc,MAAM,CAAC,CAAC,CAAC,IAAI,GAAK,QAAQ,QAAQ;oCACrF,MAAM,OAAO,cAAc;gCAC7B,GAAG,QAAQ,IAAI;gCACf,WAAU;;kDAEV,8OAAC;wCAAK,WAAU;kDAAuB;;;;;;kDACvC,8OAAC;wCAAI,WAAU;wCAAU,MAAK;wCAAO,QAAO;wCAAe,SAAQ;kDACjE,cAAA,8OAAC;4CAAK,eAAc;4CAAQ,gBAAe;4CAAQ,aAAa;4CAAG,GAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASvF","debugId":null}},
    {"offset": {"line": 933, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/admin/dashboard/transaksi/transaksitablewrapper.tsx"],"sourcesContent":["import TransaksiTable from '@/app/ui/transaksi/table';\n\ninterface Props {\n  searchParams?: { [key: string]: string | string[] | undefined };\n}\n\nexport default async function TransaksiTableWrapper({ searchParams }: Props) {\n  return (\n    <>\n      <h1 className=\"text-2xl font-bold mb-6 text-gray-800\">Riwayat Transaksi</h1>\n      <TransaksiTable searchParams={searchParams || {}} />\n    </>\n  );\n}"],"names":[],"mappings":";;;;AAAA;;;AAMe,eAAe,sBAAsB,EAAE,YAAY,EAAS;IACzE,qBACE;;0BACE,8OAAC;gBAAG,WAAU;0BAAwC;;;;;;0BACtD,8OAAC,uIAAA,CAAA,UAAc;gBAAC,cAAc,gBAAgB,CAAC;;;;;;;;AAGrD","debugId":null}},
    {"offset": {"line": 967, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/menu/buttons.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const CreateProduk = registerClientReference(\n    function() { throw new Error(\"Attempted to call CreateProduk() from the server but CreateProduk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx <module evaluation>\",\n    \"CreateProduk\",\n);\nexport const DeleteProduk = registerClientReference(\n    function() { throw new Error(\"Attempted to call DeleteProduk() from the server but DeleteProduk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx <module evaluation>\",\n    \"DeleteProduk\",\n);\nexport const UpdateProduk = registerClientReference(\n    function() { throw new Error(\"Attempted to call UpdateProduk() from the server but UpdateProduk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx <module evaluation>\",\n    \"UpdateProduk\",\n);\n"],"names":[],"mappings":";;;;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,6DACA;AAEG,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,6DACA;AAEG,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,6DACA","debugId":null}},
    {"offset": {"line": 989, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/menu/buttons.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const CreateProduk = registerClientReference(\n    function() { throw new Error(\"Attempted to call CreateProduk() from the server but CreateProduk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx\",\n    \"CreateProduk\",\n);\nexport const DeleteProduk = registerClientReference(\n    function() { throw new Error(\"Attempted to call DeleteProduk() from the server but DeleteProduk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx\",\n    \"DeleteProduk\",\n);\nexport const UpdateProduk = registerClientReference(\n    function() { throw new Error(\"Attempted to call UpdateProduk() from the server but UpdateProduk is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx\",\n    \"UpdateProduk\",\n);\n"],"names":[],"mappings":";;;;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,yCACA;AAEG,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,yCACA;AAEG,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,yCACA","debugId":null}},
    {"offset": {"line": 1011, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1021, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/admin/dashboard/transaksi/page.tsx"],"sourcesContent":["import { Suspense } from 'react';\r\nimport TransaksiSkeleton from './transaksiskeleton';\r\nimport TransaksiTableWrapper from './transaksitablewrapper';\r\nimport { CreateTransaksi } from '@/app/ui/menu/buttons';\r\n\r\ninterface Props {\r\n  searchParams?: { [key: string]: string | string[] | undefined };\r\n}\r\n\r\nexport default function TransaksiPage({ searchParams }: Props) {\r\n  return (\r\n    <section className=\"p-6\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <h1 className=\"text-2xl font-bold\">Kelola Transaksi</h1>\r\n        <CreateTransaksi />\r\n      </div>\r\n      \r\n      <Suspense fallback={<TransaksiSkeleton />}>\r\n        <TransaksiTableWrapper searchParams={searchParams} />\r\n      </Suspense>\r\n    </section>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;AAMe,SAAS,cAAc,EAAE,YAAY,EAAS;IAC3D,qBACE,8OAAC;QAAQ,WAAU;;0BACjB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAqB;;;;;;kCACnC,8OAAC,oIAAA,CAAA,kBAAe;;;;;;;;;;;0BAGlB,8OAAC,qMAAA,CAAA,WAAQ;gBAAC,wBAAU,8OAAC,mKAAA,CAAA,UAAiB;;;;;0BACpC,cAAA,8OAAC,uKAAA,CAAA,UAAqB;oBAAC,cAAc;;;;;;;;;;;;;;;;;AAI7C","debugId":null}}]
}