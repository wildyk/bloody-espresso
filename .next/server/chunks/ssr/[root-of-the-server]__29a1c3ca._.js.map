{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\nimport postgres from 'postgres';\nimport { z } from 'zod';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\nconst MenuSchema = z.object({\n  id: z.string(),\n  nama_produk: z.string(),\n  harga_produk: z.number(),\n});\n\nconst CreateMenu = MenuSchema.omit({ id: true });\nconst UpdateMenu = MenuSchema.omit({ id: true });\n\nexport async function createMenu(formData: FormData) {\n  const { nama_produk, harga_produk } = CreateMenu.parse({\n    nama_produk: formData.get('nama_produk'),\n    harga_produk: Number(formData.get('harga_produk')),\n  });\n\n  await sql`\n    INSERT INTO produk (nama_produk, harga_produk)\n    VALUES (${nama_produk}, ${harga_produk})\n  `;\n\n  revalidatePath('/admin/dashboard/menu');\n  redirect('/admin/dashboard/menu');\n}\n\nexport async function updateMenu(id: string, formData: FormData) {\n  const { nama_produk, harga_produk } = UpdateMenu.parse({\n    nama_produk: formData.get('nama_produk'),\n    harga_produk: Number(formData.get('harga_produk')),\n  });\n\n  await sql`\n    UPDATE produk\n    SET nama_produk = ${nama_produk}, harga_produk = ${harga_produk}\n    WHERE id_produk = ${id}\n  `;\n\n  revalidatePath('/admin/dashboard/menu');\n  redirect('/admin/dashboard/menu');\n}\n\nexport async function deleteMenu(id: string) {\n  await sql`DELETE FROM produk WHERE id_produk = ${id}`;\n  revalidatePath('/admin/dashboard/menu');\n}\n\n// const CreateTransaksi = TransaksiSchema.omit({ id: true, tanggal_transaksi: true });\n// const UpdateTransaksi = TransaksiSchema.omit({ id: true, tanggal_transaksi: true });\n\n// export async function createTransaksi(formData: FormData) {\n//   const { id_produk, nama_pembeli, total_harga } = CreateTransaksi.parse({\n//     id_produk: formData.get('id_produk'),\n//     nama_pembeli: formData.get('nama_pembeli'),\n//     total_harga: Number(formData.get('total_harga')),\n//   });\n\n//   const tanggal_transaksi = new Date().toISOString().split('T')[0];\n\n//   await sql`\n//     INSERT INTO transaksi (id_produk, nama_pembeli, total_harga, tanggal_transaksi)\n//     VALUES (${id_produk}, ${nama_pembeli}, ${total_harga}, ${tanggal_transaksi})\n//   `;\n\n//   revalidatePath('/admin/dashboard/transaksi');\n//   redirect('/admin/dashboard/transaksi');\n// }\n\n// export async function updateTransaksi(id: string, formData: FormData) {\n//   const { id_produk, nama_pembeli, total_harga } = UpdateTransaksi.parse({\n//     id_produk: formData.get('id_produk'),\n//     nama_pembeli: formData.get('nama_pembeli'),\n//     total_harga: Number(formData.get('total_harga')),\n//   });\n\n//   await sql`\n//     UPDATE transaksi\n//     SET id_produk = ${id_produk}, nama_pembeli = ${nama_pembeli}, total_harga = ${total_harga}\n//     WHERE id_transaksi = ${id}\n//   `;\n\n//   revalidatePath('/admin/dashboard/transaksi');\n//   redirect('/admin/dashboard/transaksi');\n// }\n\n// export async function deleteTransaksi(id: string) {\n//   await sql`DELETE FROM transaksi WHERE id_transaksi = ${id}`;\n//   revalidatePath('/admin/dashboard/transaksi');\n// }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AAAA;AACA;AACA;AAAA;;;;;;;;AAEA,MAAM,MAAM,CAAA,GAAA,wIAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IAAE,KAAK;AAAU;AAEjE,MAAM,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,IAAI,iLAAA,CAAA,IAAC,CAAC,MAAM;IACZ,aAAa,iLAAA,CAAA,IAAC,CAAC,MAAM;IACrB,cAAc,iLAAA,CAAA,IAAC,CAAC,MAAM;AACxB;AAEA,MAAM,aAAa,WAAW,IAAI,CAAC;IAAE,IAAI;AAAK;AAC9C,MAAM,aAAa,WAAW,IAAI,CAAC;IAAE,IAAI;AAAK;AAEvC,eAAe,WAAW,QAAkB;IACjD,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,WAAW,KAAK,CAAC;QACrD,aAAa,SAAS,GAAG,CAAC;QAC1B,cAAc,OAAO,SAAS,GAAG,CAAC;IACpC;IAEA,MAAM,GAAG,CAAC;;YAEA,EAAE,YAAY,EAAE,EAAE,aAAa;EACzC,CAAC;IAED,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX;AAEO,eAAe,WAAW,EAAU,EAAE,QAAkB;IAC7D,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,WAAW,KAAK,CAAC;QACrD,aAAa,SAAS,GAAG,CAAC;QAC1B,cAAc,OAAO,SAAS,GAAG,CAAC;IACpC;IAEA,MAAM,GAAG,CAAC;;sBAEU,EAAE,YAAY,iBAAiB,EAAE,aAAa;sBAC9C,EAAE,GAAG;EACzB,CAAC;IAED,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX;AAEO,eAAe,WAAW,EAAU;IACzC,MAAM,GAAG,CAAC,qCAAqC,EAAE,GAAG,CAAC;IACrD,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;AACjB,EAEA,uFAAuF;CACvF,uFAAuF;CAEvF,8DAA8D;CAC9D,6EAA6E;CAC7E,4CAA4C;CAC5C,kDAAkD;CAClD,wDAAwD;CACxD,QAAQ;CAER,sEAAsE;CAEtE,eAAe;CACf,sFAAsF;CACtF,mFAAmF;CACnF,OAAO;CAEP,kDAAkD;CAClD,4CAA4C;CAC5C,IAAI;CAEJ,0EAA0E;CAC1E,6EAA6E;CAC7E,4CAA4C;CAC5C,kDAAkD;CAClD,wDAAwD;CACxD,QAAQ;CAER,eAAe;CACf,uBAAuB;CACvB,iGAAiG;CACjG,iCAAiC;CACjC,OAAO;CAEP,kDAAkD;CAClD,4CAA4C;CAC5C,IAAI;CAEJ,sDAAsD;CACtD,iEAAiE;CACjE,kDAAkD;CAClD,IAAI;;;IA7EkB;IAeA;IAgBA;;AA/BA,+OAAA;AAeA,+OAAA;AAgBA,+OAAA","debugId":null}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/.next-internal/server/app/admin/dashboard/menu/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {createMenu as '404ef95b7438f1013121e5ba800680d7f6b289d8b1'} from 'ACTIONS_MODULE0'\nexport {deleteMenu as '4092bf8249b5cf83282f76425a4f104d078960b79c'} from 'ACTIONS_MODULE0'\nexport {updateMenu as '602cf8d20e8baa474a749b763ff3d7e57d5c43fb59'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/lib/data.ts"],"sourcesContent":["import postgres from 'postgres';\nimport {\n  CustomerField,\n  CustomersTableType,\n  InvoiceForm,\n  InvoicesTable,\n  LatestInvoiceRaw,\n  Revenue,\n} from './definitions';\nimport { formatCurrency } from './utils';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\n// export async function fetchRevenue() {\n//   try {\n//     // Artificially delay a response for demo purposes.\n//     // Don't do this in production :)\n\n//     console.log('Fetching revenue data...');\n//     await new Promise((resolve) => setTimeout(resolve, 3000));\n\n//     const data = await sql<Revenue[]>`SELECT * FROM revenue`;\n\n//     console.log('Data fetch completed after 3 seconds.');\n\n//     return data;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch revenue data.');\n//   }\n// }\n\n// export async function fetchLatestInvoices() {\n//   try {\n//     const data = await sql<LatestInvoiceRaw[]>`\n//       SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id\n//       FROM invoices\n//       JOIN customers ON invoices.customer_id = customers.id\n//       ORDER BY invoices.date DESC\n//       LIMIT 5`;\n\n//     const latestInvoices = data.map((invoice) => ({\n//       ...invoice,\n//       amount: formatCurrency(invoice.amount),\n//     }));\n//     return latestInvoices;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch the latest invoices.');\n//   }\n// }\n\n// export async function fetchCardData() {\n//   try {\n//     // You can probably combine these into a single SQL query\n//     // However, we are intentionally splitting them to demonstrate\n//     // how to initialize multiple queries in parallel with JS.\n//     const invoiceCountPromise = sql`SELECT COUNT(*) FROM invoices`;\n//     const customerCountPromise = sql`SELECT COUNT(*) FROM customers`;\n//     const invoiceStatusPromise = sql`SELECT\n//          SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",\n//          SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"\n//          FROM invoices`;\n\n//     const data = await Promise.all([\n//       invoiceCountPromise,\n//       customerCountPromise,\n//       invoiceStatusPromise,\n//     ]);\n\n//     const numberOfInvoices = Number(data[0][0].count ?? '0');\n//     const numberOfCustomers = Number(data[1][0].count ?? '0');\n//     const totalPaidInvoices = formatCurrency(data[2][0].paid ?? '0');\n//     const totalPendingInvoices = formatCurrency(data[2][0].pending ?? '0');\n\n//     return {\n//       numberOfCustomers,\n//       numberOfInvoices,\n//       totalPaidInvoices,\n//       totalPendingInvoices,\n//     };\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch card data.');\n//   }\n// }\n\n// const ITEMS_PER_PAGE = 6;\n// export async function fetchFilteredInvoices(\n//   query: string,\n//   currentPage: number,\n// ) {\n//   const offset = (currentPage - 1) * ITEMS_PER_PAGE;\n\n//   try {\n//     const invoices = await sql<InvoicesTable[]>`\n//       SELECT\n//         invoices.id,\n//         invoices.amount,\n//         invoices.date,\n//         invoices.status,\n//         customers.name,\n//         customers.email,\n//         customers.image_url\n//       FROM invoices\n//       JOIN customers ON invoices.customer_id = customers.id\n//       WHERE\n//         customers.name ILIKE ${`%${query}%`} OR\n//         customers.email ILIKE ${`%${query}%`} OR\n//         invoices.amount::text ILIKE ${`%${query}%`} OR\n//         invoices.date::text ILIKE ${`%${query}%`} OR\n//         invoices.status ILIKE ${`%${query}%`}\n//       ORDER BY invoices.date DESC\n//       LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\n//     `;\n\n//     return invoices;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch invoices.');\n//   }\n// }\n\n// export async function fetchInvoicesPages(query: string) {\n//   try {\n//     const data = await sql`SELECT COUNT(*)\n//     FROM invoices\n//     JOIN customers ON invoices.customer_id = customers.id\n//     WHERE\n//       customers.name ILIKE ${`%${query}%`} OR\n//       customers.email ILIKE ${`%${query}%`} OR\n//       invoices.amount::text ILIKE ${`%${query}%`} OR\n//       invoices.date::text ILIKE ${`%${query}%`} OR\n//       invoices.status ILIKE ${`%${query}%`}\n//   `;\n\n//     const totalPages = Math.ceil(Number(data[0].count) / ITEMS_PER_PAGE);\n//     return totalPages;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch total number of invoices.');\n//   }\n// }\n\n// export async function fetchInvoiceById(id: string) {\n//   try {\n//     const data = await sql<InvoiceForm[]>`\n//       SELECT\n//         invoices.id,\n//         invoices.customer_id,\n//         invoices.amount,\n//         invoices.status\n//       FROM invoices\n//       WHERE invoices.id = ${id};\n//     `;\n\n//     const invoice = data.map((invoice) => ({\n//       ...invoice,\n//       // Convert amount from cents to dollars\n//       amount: invoice.amount / 100,\n//     }));\n\n//     return invoice[0];\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch invoice.');\n//   }\n// }\n\n// export async function fetchCustomers() {\n//   try {\n//     const customers = await sql<CustomerField[]>`\n//       SELECT\n//         id,\n//         name\n//       FROM customers\n//       ORDER BY name ASC\n//     `;\n\n//     return customers;\n//   } catch (err) {\n//     console.error('Database Error:', err);\n//     throw new Error('Failed to fetch all customers.');\n//   }\n// }\n\n// export async function fetchFilteredCustomers(query: string) {\n//   try {\n//     const data = await sql<CustomersTableType[]>`\n// \t\tSELECT\n// \t\t  customers.id,\n// \t\t  customers.name,\n// \t\t  customers.email,\n// \t\t  customers.image_url,\n// \t\t  COUNT(invoices.id) AS total_invoices,\n// \t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\n// \t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\n// \t\tFROM customers\n// \t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\n// \t\tWHERE\n// \t\t  customers.name ILIKE ${`%${query}%`} OR\n//         customers.email ILIKE ${`%${query}%`}\n// \t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\n// \t\tORDER BY customers.name ASC\n// \t  `;\n\n//     const customers = data.map((customer) => ({\n//       ...customer,\n//       total_pending: formatCurrency(customer.total_pending),\n//       total_paid: formatCurrency(customer.total_paid),\n//     }));\n\n//     return customers;\n//   } catch (err) {\n//     console.error('Database Error:', err);\n//     throw new Error('Failed to fetch customer table.');\n//   }\n// }\n\n\n\nexport async function fetchProduk(id: string) {\n  try {\n    const result = await sql<{\n      id_produk: number;\n      nama_produk: string;\n      harga_produk: number;\n    }[]>`\n      SELECT id_produk, nama_produk, harga_produk \n      FROM produk \n      WHERE id_produk = ${id}\n      LIMIT 1\n    `;\n\n    return result[0]; \n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch produk by ID.');\n  }\n  \n}\nexport async function fetchAllProduk() {\n  try {\n    const result = await sql`\n      SELECT id_produk, nama_produk, harga_produk \n      FROM produk \n      ORDER BY id_produk ASC\n    `;\n    return result;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch all produk.');\n  }\n}\n\n\n\nexport async function fetchTransaksi() {\n  await new Promise((r) => setTimeout(r, 1500));\n  try {\n    const transaksi = await sql<{\n      id_transaksi: number;\n      id_produk: number;\n      nama_pembeli: string;\n      tanggal_transaksi: string;\n      total_harga: number;\n    }[]>`\n      SELECT * FROM transaksi ORDER BY tanggal_transaksi ASC\n    `;\n    return transaksi;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch transaksi.');\n  }\n}\n\nexport async function fetchAnalytics() {\n  await new Promise((resolve) => setTimeout(resolve, 1500)); \n  try {\n    // Query 1: total produk\n    const totalProdukRes = await sql`SELECT COUNT(*) FROM produk`;\n    const totalProduk = Number(totalProdukRes[0].count);\n\n    // Query 2: total revenue (jumlah total_harga dari transaksi)\n    const totalRevenueRes = await sql`SELECT SUM(total_harga) FROM transaksi`;\n    const totalRevenue = Number(totalRevenueRes[0].sum || 0);\n\n    // Query 3: produk paling sering muncul di transaksi\n    const mostSoldRes = await sql`\n      SELECT p.nama_produk, COUNT(t.id_produk) AS jumlah_terjual\n      FROM transaksi t\n      JOIN produk p ON t.id_produk = p.id_produk\n      GROUP BY p.nama_produk\n      ORDER BY jumlah_terjual DESC\n      LIMIT 1;\n    `;\n    const mostSold = mostSoldRes[0];\n\n    return {\n      totalProduk,\n      totalRevenue,\n      mostSold: mostSold?.nama_produk || '-',\n      jumlahTerjual: mostSold?.jumlah_terjual || 0,\n    };\n  } catch (err) {\n    console.error('DB Error (analytics):', err);\n    throw new Error('Failed to fetch analytics data.');\n  }\n}\n\nexport async function fetchPenjualanProduk() {\n  await new Promise((resolve) => setTimeout(resolve, 2000)); \n  try {\n    const data = await sql<{ nama_produk: string; jumlah_terjual: number }[]>`\n      SELECT p.nama_produk, COUNT(t.id_produk) AS jumlah_terjual\n      FROM transaksi t\n      JOIN produk p ON t.id_produk = p.id_produk\n      GROUP BY p.nama_produk\n      ORDER BY jumlah_terjual DESC\n    `;\n    return data;\n  } catch (err) {\n    console.error('DB Error (grafik):', err);\n    throw new Error('Gagal ambil data grafik penjualan.');\n  }\n}\n\nexport async function fetchProdukWithFoto() {\n  const produk = await sql<{\n    id_produk: number;\n    nama_produk: string;\n    harga_produk: number;\n    foto: string;\n  }[]>`SELECT * FROM menu ORDER BY id_produk ASC`;\n  return produk;\n}\n\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAWA,MAAM,MAAM,CAAA,GAAA,wIAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IAAE,KAAK;AAAU;AAkN1D,eAAe,YAAY,EAAU;IAC1C,IAAI;QACF,MAAM,SAAS,MAAM,GAIjB,CAAC;;;wBAGe,EAAE,GAAG;;IAEzB,CAAC;QAED,OAAO,MAAM,CAAC,EAAE;IAClB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AAEF;AACO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,GAAG,CAAC;;;;IAIzB,CAAC;QACD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AACF;AAIO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,IAAM,WAAW,GAAG;IACvC,IAAI;QACF,MAAM,YAAY,MAAM,GAMpB,CAAC;;IAEL,CAAC;QACD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,IAAI;QACF,wBAAwB;QACxB,MAAM,iBAAiB,MAAM,GAAG,CAAC,2BAA2B,CAAC;QAC7D,MAAM,cAAc,OAAO,cAAc,CAAC,EAAE,CAAC,KAAK;QAElD,6DAA6D;QAC7D,MAAM,kBAAkB,MAAM,GAAG,CAAC,sCAAsC,CAAC;QACzE,MAAM,eAAe,OAAO,eAAe,CAAC,EAAE,CAAC,GAAG,IAAI;QAEtD,oDAAoD;QACpD,MAAM,cAAc,MAAM,GAAG,CAAC;;;;;;;IAO9B,CAAC;QACD,MAAM,WAAW,WAAW,CAAC,EAAE;QAE/B,OAAO;YACL;YACA;YACA,UAAU,UAAU,eAAe;YACnC,eAAe,UAAU,kBAAkB;QAC7C;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,IAAI;QACF,MAAM,OAAO,MAAM,GAAsD,CAAC;;;;;;IAM1E,CAAC;QACD,OAAO;IACT,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,sBAAsB;QACpC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,SAAS,MAAM,GAKjB,CAAC,yCAAyC,CAAC;IAC/C,OAAO;AACT","debugId":null}},
    {"offset": {"line": 352, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/menu/table.tsx"],"sourcesContent":["import { PencilIcon, PlusIcon, TrashIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\nimport { deleteMenu } from '@/app/lib/actions';\n\nexport function CreateProduk() {\n  return (\n    <Link\n      href=\"/admin/dashboard/menu/create\"\n      className=\"flex h-10 items-center rounded-lg bg-red-600 px-4 text-sm font-medium text-white transition-colors hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600\"\n    >\n      <span className=\"hidden md:block\">Create Produk</span>{' '}\n      <PlusIcon className=\"h-5 md:ml-4\" />\n    </Link>\n  );\n}\n\nexport function UpdateProduk({ id }: { id: string }) {\n  return (\n    <Link\n      href={`/admin/dashboard/menu/${id}/edit`}\n      className=\"rounded-md border p-2 hover:bg-gray-100\"\n    >\n      <PencilIcon className=\"w-5\" />\n    </Link>\n  );\n}\n\nexport function DeleteProduk({ id }: { id: string }) {\n  const deleteMenuWithId = deleteMenu.bind(null, id);\n  \n  return (\n    <form action={deleteMenuWithId}>\n      <button \n        className=\"rounded-md border p-2 hover:bg-gray-100\"\n        onClick={(e) => {\n          if (!confirm('Are you sure you want to delete this product?')) {\n            e.preventDefault();\n          }\n        }}\n      >\n        <span className=\"sr-only\">Delete</span>\n        <TrashIcon className=\"w-5\" />\n      </button>\n    </form>\n  );\n}"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AACA;AACA;;;;;AAEO,SAAS;IACd,qBACE,8OAAC,4JAAA,CAAA,UAAI;QACH,MAAK;QACL,WAAU;;0BAEV,8OAAC;gBAAK,WAAU;0BAAkB;;;;;;YAAqB;0BACvD,8OAAC,+MAAA,CAAA,WAAQ;gBAAC,WAAU;;;;;;;;;;;;AAG1B;AAEO,SAAS,aAAa,EAAE,EAAE,EAAkB;IACjD,qBACE,8OAAC,4JAAA,CAAA,UAAI;QACH,MAAM,CAAC,sBAAsB,EAAE,GAAG,KAAK,CAAC;QACxC,WAAU;kBAEV,cAAA,8OAAC,mNAAA,CAAA,aAAU;YAAC,WAAU;;;;;;;;;;;AAG5B;AAEO,SAAS,aAAa,EAAE,EAAE,EAAkB;IACjD,MAAM,mBAAmB,4HAAA,CAAA,aAAU,CAAC,IAAI,CAAC,MAAM;IAE/C,qBACE,8OAAC;QAAK,QAAQ;kBACZ,cAAA,8OAAC;YACC,WAAU;YACV,SAAS,CAAC;gBACR,IAAI,CAAC,QAAQ,kDAAkD;oBAC7D,EAAE,cAAc;gBAClB;YACF;;8BAEA,8OAAC;oBAAK,WAAU;8BAAU;;;;;;8BAC1B,8OAAC,iNAAA,CAAA,YAAS;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAI7B","debugId":null}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/admin/dashboard/menu/produktablewrapper.tsx"],"sourcesContent":["import { fetchAllProduk } from '@/app/lib/data';\nimport ProdukTable from '@/app/ui/menu/table';\n\nexport const dynamic = 'force-dynamic';\nexport default async function ProdukTableWrapper({\n  searchParams,\n}: {\n  searchParams: { query?: string; page?: string };\n}) {\n  const produkList = await fetchAllProduk();\n\n  return <ProdukTable data={produkList} searchParams={searchParams} />;\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;;AAEO,MAAM,UAAU;AACR,eAAe,mBAAmB,EAC/C,YAAY,EAGb;IACC,MAAM,aAAa,MAAM,CAAA,GAAA,yHAAA,CAAA,iBAAc,AAAD;IAEtC,qBAAO,8OAAC,kIAAA,CAAA,UAAW;QAAC,MAAM;QAAY,cAAc;;;;;;AACtD","debugId":null}},
    {"offset": {"line": 485, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/search.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/ui/search.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/search.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyR,GACtT,uDACA","debugId":null}},
    {"offset": {"line": 499, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/search.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/ui/search.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/search.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqQ,GAClS,mCACA","debugId":null}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 523, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/menu/buttons.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const CreateMenu = registerClientReference(\n    function() { throw new Error(\"Attempted to call CreateMenu() from the server but CreateMenu is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx <module evaluation>\",\n    \"CreateMenu\",\n);\nexport const DeleteMenu = registerClientReference(\n    function() { throw new Error(\"Attempted to call DeleteMenu() from the server but DeleteMenu is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx <module evaluation>\",\n    \"DeleteMenu\",\n);\nexport const UpdateMenu = registerClientReference(\n    function() { throw new Error(\"Attempted to call UpdateMenu() from the server but UpdateMenu is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx <module evaluation>\",\n    \"UpdateMenu\",\n);\n"],"names":[],"mappings":";;;;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,6DACA;AAEG,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,6DACA;AAEG,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,6DACA","debugId":null}},
    {"offset": {"line": 545, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/menu/buttons.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const CreateMenu = registerClientReference(\n    function() { throw new Error(\"Attempted to call CreateMenu() from the server but CreateMenu is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx\",\n    \"CreateMenu\",\n);\nexport const DeleteMenu = registerClientReference(\n    function() { throw new Error(\"Attempted to call DeleteMenu() from the server but DeleteMenu is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx\",\n    \"DeleteMenu\",\n);\nexport const UpdateMenu = registerClientReference(\n    function() { throw new Error(\"Attempted to call UpdateMenu() from the server but UpdateMenu is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/ui/menu/buttons.tsx\",\n    \"UpdateMenu\",\n);\n"],"names":[],"mappings":";;;;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,yCACA;AAEG,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,yCACA;AAEG,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,yCACA","debugId":null}},
    {"offset": {"line": 567, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 577, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/admin/dashboard/menu/page.tsx"],"sourcesContent":["import { Suspense } from 'react';\r\nimport ProdukSkeleton from './produkskeleton';\r\nimport ProdukTableWrapper from './produktablewrapper';\r\nimport Search from '@/app/ui/search';\r\nimport { CreateMenu } from '@/app/ui/menu/buttons';\r\n\r\nexport default function ProdukPage({\r\n  searchParams,\r\n}: {\r\n  searchParams: { query?: string; page?: string };\r\n}) {\r\n  return (\r\n    <section className=\"p-6\">\r\n      {/* Header: Judul, Search, dan Tombol Tambah */}\r\n      <div className=\"mb-4 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\r\n        <h1 className=\"text-2xl font-bold text-gray-800\">Katalog Produk</h1>\r\n\r\n        <div className=\"flex w-full flex-col gap-2 sm:w-auto sm:flex-row sm:items-center\">\r\n          <Search placeholder=\"Cari produk...\" />\r\n          <CreateMenu />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tabel Produk + Loading Fallback */}\r\n      <Suspense fallback={<ProdukSkeleton />}>\r\n        <ProdukTableWrapper searchParams={searchParams} />\r\n      </Suspense>\r\n    </section>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;AAEe,SAAS,WAAW,EACjC,YAAY,EAGb;IACC,qBACE,8OAAC;QAAQ,WAAU;;0BAEjB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAmC;;;;;;kCAEjD,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,2HAAA,CAAA,UAAM;gCAAC,aAAY;;;;;;0CACpB,8OAAC,oIAAA,CAAA,aAAU;;;;;;;;;;;;;;;;;0BAKf,8OAAC,qMAAA,CAAA,WAAQ;gBAAC,wBAAU,8OAAC,2JAAA,CAAA,UAAc;;;;;0BACjC,cAAA,8OAAC,+JAAA,CAAA,UAAkB;oBAAC,cAAc;;;;;;;;;;;;;;;;;AAI1C","debugId":null}}]
}