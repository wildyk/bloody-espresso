{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/lib/data.ts"],"sourcesContent":["import postgres from 'postgres';\nimport {\n  CustomerField,\n  CustomersTableType,\n  InvoiceForm,\n  InvoicesTable,\n  LatestInvoiceRaw,\n  Revenue,\n} from './definitions';\nimport { formatCurrency } from './utils';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\n// export async function fetchRevenue() {\n//   try {\n//     // Artificially delay a response for demo purposes.\n//     // Don't do this in production :)\n\n//     console.log('Fetching revenue data...');\n//     await new Promise((resolve) => setTimeout(resolve, 3000));\n\n//     const data = await sql<Revenue[]>`SELECT * FROM revenue`;\n\n//     console.log('Data fetch completed after 3 seconds.');\n\n//     return data;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch revenue data.');\n//   }\n// }\n\n// export async function fetchLatestInvoices() {\n//   try {\n//     const data = await sql<LatestInvoiceRaw[]>`\n//       SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id\n//       FROM invoices\n//       JOIN customers ON invoices.customer_id = customers.id\n//       ORDER BY invoices.date DESC\n//       LIMIT 5`;\n\n//     const latestInvoices = data.map((invoice) => ({\n//       ...invoice,\n//       amount: formatCurrency(invoice.amount),\n//     }));\n//     return latestInvoices;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch the latest invoices.');\n//   }\n// }\n\n// export async function fetchCardData() {\n//   try {\n//     // You can probably combine these into a single SQL query\n//     // However, we are intentionally splitting them to demonstrate\n//     // how to initialize multiple queries in parallel with JS.\n//     const invoiceCountPromise = sql`SELECT COUNT(*) FROM invoices`;\n//     const customerCountPromise = sql`SELECT COUNT(*) FROM customers`;\n//     const invoiceStatusPromise = sql`SELECT\n//          SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",\n//          SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"\n//          FROM invoices`;\n\n//     const data = await Promise.all([\n//       invoiceCountPromise,\n//       customerCountPromise,\n//       invoiceStatusPromise,\n//     ]);\n\n//     const numberOfInvoices = Number(data[0][0].count ?? '0');\n//     const numberOfCustomers = Number(data[1][0].count ?? '0');\n//     const totalPaidInvoices = formatCurrency(data[2][0].paid ?? '0');\n//     const totalPendingInvoices = formatCurrency(data[2][0].pending ?? '0');\n\n//     return {\n//       numberOfCustomers,\n//       numberOfInvoices,\n//       totalPaidInvoices,\n//       totalPendingInvoices,\n//     };\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch card data.');\n//   }\n// }\n\n// const ITEMS_PER_PAGE = 6;\n// export async function fetchFilteredInvoices(\n//   query: string,\n//   currentPage: number,\n// ) {\n//   const offset = (currentPage - 1) * ITEMS_PER_PAGE;\n\n//   try {\n//     const invoices = await sql<InvoicesTable[]>`\n//       SELECT\n//         invoices.id,\n//         invoices.amount,\n//         invoices.date,\n//         invoices.status,\n//         customers.name,\n//         customers.email,\n//         customers.image_url\n//       FROM invoices\n//       JOIN customers ON invoices.customer_id = customers.id\n//       WHERE\n//         customers.name ILIKE ${`%${query}%`} OR\n//         customers.email ILIKE ${`%${query}%`} OR\n//         invoices.amount::text ILIKE ${`%${query}%`} OR\n//         invoices.date::text ILIKE ${`%${query}%`} OR\n//         invoices.status ILIKE ${`%${query}%`}\n//       ORDER BY invoices.date DESC\n//       LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\n//     `;\n\n//     return invoices;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch invoices.');\n//   }\n// }\n\n// export async function fetchInvoicesPages(query: string) {\n//   try {\n//     const data = await sql`SELECT COUNT(*)\n//     FROM invoices\n//     JOIN customers ON invoices.customer_id = customers.id\n//     WHERE\n//       customers.name ILIKE ${`%${query}%`} OR\n//       customers.email ILIKE ${`%${query}%`} OR\n//       invoices.amount::text ILIKE ${`%${query}%`} OR\n//       invoices.date::text ILIKE ${`%${query}%`} OR\n//       invoices.status ILIKE ${`%${query}%`}\n//   `;\n\n//     const totalPages = Math.ceil(Number(data[0].count) / ITEMS_PER_PAGE);\n//     return totalPages;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch total number of invoices.');\n//   }\n// }\n\n// export async function fetchInvoiceById(id: string) {\n//   try {\n//     const data = await sql<InvoiceForm[]>`\n//       SELECT\n//         invoices.id,\n//         invoices.customer_id,\n//         invoices.amount,\n//         invoices.status\n//       FROM invoices\n//       WHERE invoices.id = ${id};\n//     `;\n\n//     const invoice = data.map((invoice) => ({\n//       ...invoice,\n//       // Convert amount from cents to dollars\n//       amount: invoice.amount / 100,\n//     }));\n\n//     return invoice[0];\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch invoice.');\n//   }\n// }\n\n// export async function fetchCustomers() {\n//   try {\n//     const customers = await sql<CustomerField[]>`\n//       SELECT\n//         id,\n//         name\n//       FROM customers\n//       ORDER BY name ASC\n//     `;\n\n//     return customers;\n//   } catch (err) {\n//     console.error('Database Error:', err);\n//     throw new Error('Failed to fetch all customers.');\n//   }\n// }\n\n// export async function fetchFilteredCustomers(query: string) {\n//   try {\n//     const data = await sql<CustomersTableType[]>`\n// \t\tSELECT\n// \t\t  customers.id,\n// \t\t  customers.name,\n// \t\t  customers.email,\n// \t\t  customers.image_url,\n// \t\t  COUNT(invoices.id) AS total_invoices,\n// \t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\n// \t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\n// \t\tFROM customers\n// \t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\n// \t\tWHERE\n// \t\t  customers.name ILIKE ${`%${query}%`} OR\n//         customers.email ILIKE ${`%${query}%`}\n// \t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\n// \t\tORDER BY customers.name ASC\n// \t  `;\n\n//     const customers = data.map((customer) => ({\n//       ...customer,\n//       total_pending: formatCurrency(customer.total_pending),\n//       total_paid: formatCurrency(customer.total_paid),\n//     }));\n\n//     return customers;\n//   } catch (err) {\n//     console.error('Database Error:', err);\n//     throw new Error('Failed to fetch customer table.');\n//   }\n// }\n\n\n\nexport async function fetchProduk(id: string) {\n  await new Promise((resolve) => setTimeout(resolve, 1500)); \n  try {\n    const produk = await sql<{\n      id_produk: number;\n      nama_produk: string;\n      harga_produk: number;\n    }[]>`\n      SELECT id_produk, nama_produk, harga_produk FROM produk ORDER BY id_produk ASC\n    `;\n\n    return produk;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch produk.');\n  }\n}\n\n\nexport async function fetchTransaksi() {\n  await new Promise((r) => setTimeout(r, 1500));\n  try {\n    const transaksi = await sql<{\n      id_transaksi: number;\n      id_produk: number;\n      nama_pembeli: string;\n      tanggal_transaksi: string;\n      total_harga: number;\n    }[]>`\n      SELECT * FROM transaksi ORDER BY tanggal_transaksi ASC\n    `;\n    return transaksi;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch transaksi.');\n  }\n}\n\nexport async function fetchAnalytics() {\n  await new Promise((resolve) => setTimeout(resolve, 1500)); \n  try {\n    // Query 1: total produk\n    const totalProdukRes = await sql`SELECT COUNT(*) FROM produk`;\n    const totalProduk = Number(totalProdukRes[0].count);\n\n    // Query 2: total revenue (jumlah total_harga dari transaksi)\n    const totalRevenueRes = await sql`SELECT SUM(total_harga) FROM transaksi`;\n    const totalRevenue = Number(totalRevenueRes[0].sum || 0);\n\n    // Query 3: produk paling sering muncul di transaksi\n    const mostSoldRes = await sql`\n      SELECT p.nama_produk, COUNT(t.id_produk) AS jumlah_terjual\n      FROM transaksi t\n      JOIN produk p ON t.id_produk = p.id_produk\n      GROUP BY p.nama_produk\n      ORDER BY jumlah_terjual DESC\n      LIMIT 1;\n    `;\n    const mostSold = mostSoldRes[0];\n\n    return {\n      totalProduk,\n      totalRevenue,\n      mostSold: mostSold?.nama_produk || '-',\n      jumlahTerjual: mostSold?.jumlah_terjual || 0,\n    };\n  } catch (err) {\n    console.error('DB Error (analytics):', err);\n    throw new Error('Failed to fetch analytics data.');\n  }\n}\n\nexport async function fetchPenjualanProduk() {\n  await new Promise((resolve) => setTimeout(resolve, 2000)); \n  try {\n    const data = await sql<{ nama_produk: string; jumlah_terjual: number }[]>`\n      SELECT p.nama_produk, COUNT(t.id_produk) AS jumlah_terjual\n      FROM transaksi t\n      JOIN produk p ON t.id_produk = p.id_produk\n      GROUP BY p.nama_produk\n      ORDER BY jumlah_terjual DESC\n    `;\n    return data;\n  } catch (err) {\n    console.error('DB Error (grafik):', err);\n    throw new Error('Gagal ambil data grafik penjualan.');\n  }\n}\n\nexport async function fetchProdukWithFoto() {\n  const produk = await sql<{\n    id_produk: number;\n    nama_produk: string;\n    harga_produk: number;\n    foto: string;\n  }[]>`SELECT * FROM menu ORDER BY id_produk ASC`;\n  return produk;\n}\n\n"],"names":[],"mappings":";;;;;;;AAAA;;AAWA,MAAM,MAAM,CAAA,GAAA,wIAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY,EAAG;IAAE,KAAK;AAAU;AAkN1D,eAAe,YAAY,EAAU;IAC1C,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,IAAI;QACF,MAAM,SAAS,MAAM,GAIjB,CAAC;;IAEL,CAAC;QAED,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,IAAM,WAAW,GAAG;IACvC,IAAI;QACF,MAAM,YAAY,MAAM,GAMpB,CAAC;;IAEL,CAAC;QACD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,IAAI;QACF,wBAAwB;QACxB,MAAM,iBAAiB,MAAM,GAAG,CAAC,2BAA2B,CAAC;QAC7D,MAAM,cAAc,OAAO,cAAc,CAAC,EAAE,CAAC,KAAK;QAElD,6DAA6D;QAC7D,MAAM,kBAAkB,MAAM,GAAG,CAAC,sCAAsC,CAAC;QACzE,MAAM,eAAe,OAAO,eAAe,CAAC,EAAE,CAAC,GAAG,IAAI;QAEtD,oDAAoD;QACpD,MAAM,cAAc,MAAM,GAAG,CAAC;;;;;;;IAO9B,CAAC;QACD,MAAM,WAAW,WAAW,CAAC,EAAE;QAE/B,OAAO;YACL;YACA;YACA,UAAU,UAAU,eAAe;YACnC,eAAe,UAAU,kBAAkB;QAC7C;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,IAAI;QACF,MAAM,OAAO,MAAM,GAAsD,CAAC;;;;;;IAM1E,CAAC;QACD,OAAO;IACT,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,sBAAsB;QACpC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,SAAS,MAAM,GAKjB,CAAC,yCAAyC,CAAC;IAC/C,OAAO;AACT","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/transaksi/table.tsx"],"sourcesContent":["import { fetchTransaksi } from '@/app/lib/data';\n\nexport default async function TransaksiTable() {\n  const transaksiList = await fetchTransaksi();\n\n  return (\n    <div className=\"overflow-x-auto rounded-md border border-gray-300 shadow-sm\">\n      <table className=\"min-w-full divide-y divide-gray-200 text-sm\">\n        <thead className=\"bg-red-800 text-white\">\n          <tr>\n            <th className=\"px-4 py-3 text-left font-semibold\">ID Transaksi</th>\n            <th className=\"px-4 py-3 text-left font-semibold\">ID Produk</th>\n            <th className=\"px-4 py-3 text-left font-semibold\">Nama Pembeli</th>\n            <th className=\"px-4 py-3 text-left font-semibold\">Tanggal</th>\n            <th className=\"px-4 py-3 text-left font-semibold\">Total Harga</th>\n          </tr>\n        </thead>\n        <tbody className=\"divide-y divide-gray-100 bg-white text-gray-800\">\n          {transaksiList.map((t) => (\n            <tr key={t.id_transaksi}>\n              <td className=\"px-4 py-2\">{t.id_transaksi}</td>\n              <td className=\"px-4 py-2\">{t.id_produk}</td>\n              <td className=\"px-4 py-2\">{t.nama_pembeli}</td>\n              <td className=\"px-4 py-2\">{new Date(t.tanggal_transaksi).toLocaleDateString()}</td>\n              <td className=\"px-4 py-2\">Rp {t.total_harga.toLocaleString()}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,eAAe;IAC5B,MAAM,gBAAgB,MAAM,CAAA,GAAA,yHAAA,CAAA,iBAAc,AAAD;IAEzC,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAM,WAAU;;8BACf,8OAAC;oBAAM,WAAU;8BACf,cAAA,8OAAC;;0CACC,8OAAC;gCAAG,WAAU;0CAAoC;;;;;;0CAClD,8OAAC;gCAAG,WAAU;0CAAoC;;;;;;0CAClD,8OAAC;gCAAG,WAAU;0CAAoC;;;;;;0CAClD,8OAAC;gCAAG,WAAU;0CAAoC;;;;;;0CAClD,8OAAC;gCAAG,WAAU;0CAAoC;;;;;;;;;;;;;;;;;8BAGtD,8OAAC;oBAAM,WAAU;8BACd,cAAc,GAAG,CAAC,CAAC,kBAClB,8OAAC;;8CACC,8OAAC;oCAAG,WAAU;8CAAa,EAAE,YAAY;;;;;;8CACzC,8OAAC;oCAAG,WAAU;8CAAa,EAAE,SAAS;;;;;;8CACtC,8OAAC;oCAAG,WAAU;8CAAa,EAAE,YAAY;;;;;;8CACzC,8OAAC;oCAAG,WAAU;8CAAa,IAAI,KAAK,EAAE,iBAAiB,EAAE,kBAAkB;;;;;;8CAC3E,8OAAC;oCAAG,WAAU;;wCAAY;wCAAI,EAAE,WAAW,CAAC,cAAc;;;;;;;;2BALnD,EAAE,YAAY;;;;;;;;;;;;;;;;;;;;;AAYnC","debugId":null}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/admin/dashboard/transaksi/transaksitablewrapper.tsx"],"sourcesContent":["import TransaksiTable from '@/app/ui/transaksi/table';\n\nexport default async function TransaksiTableWrapper() {\n  return (\n    <>\n      <h1 className=\"text-2xl font-bold mb-6 text-gray-800\">Riwayat Transaksi</h1>\n      <TransaksiTable />\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,eAAe;IAC5B,qBACE;;0BACE,8OAAC;gBAAG,WAAU;0BAAwC;;;;;;0BACtD,8OAAC,uIAAA,CAAA,UAAc;;;;;;;AAGrB","debugId":null}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/admin/dashboard/transaksi/page.tsx"],"sourcesContent":["import { Suspense } from 'react';\r\nimport TransaksiSkeleton from './transaksiskeleton';\r\nimport TransaksiTableWrapper from './transaksitablewrapper';\r\n\r\nexport default function TransaksiPage() {\r\n  return (\r\n    <section className=\"p-6\">\r\n      <Suspense fallback={<TransaksiSkeleton />}>\r\n        <TransaksiTableWrapper />\r\n      </Suspense>\r\n    </section>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAQ,WAAU;kBACjB,cAAA,8OAAC,qMAAA,CAAA,WAAQ;YAAC,wBAAU,8OAAC,mKAAA,CAAA,UAAiB;;;;;sBACpC,cAAA,8OAAC,uKAAA,CAAA,UAAqB;;;;;;;;;;;;;;;AAI9B","debugId":null}}]
}