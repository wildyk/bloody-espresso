{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/lib/data.ts"],"sourcesContent":["import postgres from 'postgres';\nimport {\n  CustomerField,\n  CustomersTableType,\n  InvoiceForm,\n  InvoicesTable,\n  LatestInvoiceRaw,\n  Revenue,\n} from './definitions';\nimport { formatCurrency } from './utils';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\n// export async function fetchRevenue() {\n//   try {\n//     // Artificially delay a response for demo purposes.\n//     // Don't do this in production :)\n\n//     console.log('Fetching revenue data...');\n//     await new Promise((resolve) => setTimeout(resolve, 3000));\n\n//     const data = await sql<Revenue[]>`SELECT * FROM revenue`;\n\n//     console.log('Data fetch completed after 3 seconds.');\n\n//     return data;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch revenue data.');\n//   }\n// }\n\n// export async function fetchLatestInvoices() {\n//   try {\n//     const data = await sql<LatestInvoiceRaw[]>`\n//       SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id\n//       FROM invoices\n//       JOIN customers ON invoices.customer_id = customers.id\n//       ORDER BY invoices.date DESC\n//       LIMIT 5`;\n\n//     const latestInvoices = data.map((invoice) => ({\n//       ...invoice,\n//       amount: formatCurrency(invoice.amount),\n//     }));\n//     return latestInvoices;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch the latest invoices.');\n//   }\n// }\n\n// export async function fetchCardData() {\n//   try {\n//     // You can probably combine these into a single SQL query\n//     // However, we are intentionally splitting them to demonstrate\n//     // how to initialize multiple queries in parallel with JS.\n//     const invoiceCountPromise = sql`SELECT COUNT(*) FROM invoices`;\n//     const customerCountPromise = sql`SELECT COUNT(*) FROM customers`;\n//     const invoiceStatusPromise = sql`SELECT\n//          SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",\n//          SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"\n//          FROM invoices`;\n\n//     const data = await Promise.all([\n//       invoiceCountPromise,\n//       customerCountPromise,\n//       invoiceStatusPromise,\n//     ]);\n\n//     const numberOfInvoices = Number(data[0][0].count ?? '0');\n//     const numberOfCustomers = Number(data[1][0].count ?? '0');\n//     const totalPaidInvoices = formatCurrency(data[2][0].paid ?? '0');\n//     const totalPendingInvoices = formatCurrency(data[2][0].pending ?? '0');\n\n//     return {\n//       numberOfCustomers,\n//       numberOfInvoices,\n//       totalPaidInvoices,\n//       totalPendingInvoices,\n//     };\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch card data.');\n//   }\n// }\n\n// const ITEMS_PER_PAGE = 6;\n// export async function fetchFilteredInvoices(\n//   query: string,\n//   currentPage: number,\n// ) {\n//   const offset = (currentPage - 1) * ITEMS_PER_PAGE;\n\n//   try {\n//     const invoices = await sql<InvoicesTable[]>`\n//       SELECT\n//         invoices.id,\n//         invoices.amount,\n//         invoices.date,\n//         invoices.status,\n//         customers.name,\n//         customers.email,\n//         customers.image_url\n//       FROM invoices\n//       JOIN customers ON invoices.customer_id = customers.id\n//       WHERE\n//         customers.name ILIKE ${`%${query}%`} OR\n//         customers.email ILIKE ${`%${query}%`} OR\n//         invoices.amount::text ILIKE ${`%${query}%`} OR\n//         invoices.date::text ILIKE ${`%${query}%`} OR\n//         invoices.status ILIKE ${`%${query}%`}\n//       ORDER BY invoices.date DESC\n//       LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\n//     `;\n\n//     return invoices;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch invoices.');\n//   }\n// }\n\n// export async function fetchInvoicesPages(query: string) {\n//   try {\n//     const data = await sql`SELECT COUNT(*)\n//     FROM invoices\n//     JOIN customers ON invoices.customer_id = customers.id\n//     WHERE\n//       customers.name ILIKE ${`%${query}%`} OR\n//       customers.email ILIKE ${`%${query}%`} OR\n//       invoices.amount::text ILIKE ${`%${query}%`} OR\n//       invoices.date::text ILIKE ${`%${query}%`} OR\n//       invoices.status ILIKE ${`%${query}%`}\n//   `;\n\n//     const totalPages = Math.ceil(Number(data[0].count) / ITEMS_PER_PAGE);\n//     return totalPages;\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch total number of invoices.');\n//   }\n// }\n\n// export async function fetchInvoiceById(id: string) {\n//   try {\n//     const data = await sql<InvoiceForm[]>`\n//       SELECT\n//         invoices.id,\n//         invoices.customer_id,\n//         invoices.amount,\n//         invoices.status\n//       FROM invoices\n//       WHERE invoices.id = ${id};\n//     `;\n\n//     const invoice = data.map((invoice) => ({\n//       ...invoice,\n//       // Convert amount from cents to dollars\n//       amount: invoice.amount / 100,\n//     }));\n\n//     return invoice[0];\n//   } catch (error) {\n//     console.error('Database Error:', error);\n//     throw new Error('Failed to fetch invoice.');\n//   }\n// }\n\n// export async function fetchCustomers() {\n//   try {\n//     const customers = await sql<CustomerField[]>`\n//       SELECT\n//         id,\n//         name\n//       FROM customers\n//       ORDER BY name ASC\n//     `;\n\n//     return customers;\n//   } catch (err) {\n//     console.error('Database Error:', err);\n//     throw new Error('Failed to fetch all customers.');\n//   }\n// }\n\n// export async function fetchFilteredCustomers(query: string) {\n//   try {\n//     const data = await sql<CustomersTableType[]>`\n// \t\tSELECT\n// \t\t  customers.id,\n// \t\t  customers.name,\n// \t\t  customers.email,\n// \t\t  customers.image_url,\n// \t\t  COUNT(invoices.id) AS total_invoices,\n// \t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\n// \t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\n// \t\tFROM customers\n// \t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\n// \t\tWHERE\n// \t\t  customers.name ILIKE ${`%${query}%`} OR\n//         customers.email ILIKE ${`%${query}%`}\n// \t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\n// \t\tORDER BY customers.name ASC\n// \t  `;\n\n//     const customers = data.map((customer) => ({\n//       ...customer,\n//       total_pending: formatCurrency(customer.total_pending),\n//       total_paid: formatCurrency(customer.total_paid),\n//     }));\n\n//     return customers;\n//   } catch (err) {\n//     console.error('Database Error:', err);\n//     throw new Error('Failed to fetch customer table.');\n//   }\n// }\n\n\n\nexport async function fetchProduk(id: string) {\n  try {\n    const result = await sql<{\n      id_produk: number;\n      nama_produk: string;\n      harga_produk: number;\n    }[]>`\n      SELECT id_produk, nama_produk, harga_produk \n      FROM produk \n      WHERE id_produk = ${id}\n      LIMIT 1\n    `;\n\n    return result[0]; \n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch produk by ID.');\n  }\n  \n}\nexport async function fetchAllProduk() {\n  try {\n    const result = await sql`\n      SELECT id_produk, nama_produk, harga_produk \n      FROM produk \n      ORDER BY id_produk ASC\n    `;\n    return result;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch all produk.');\n  }\n}\n\n\n\nexport async function fetchTransaksi() {\n  await new Promise((r) => setTimeout(r, 1500));\n  try {\n    const transaksi = await sql<{\n      id_transaksi: number;\n      id_produk: number;\n      nama_pembeli: string;\n      tanggal_transaksi: string;\n      total_harga: number;\n    }[]>`\n      SELECT * FROM transaksi ORDER BY tanggal_transaksi ASC\n    `;\n    return transaksi;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch transaksi.');\n  }\n}\n\nexport async function fetchAnalytics() {\n  await new Promise((resolve) => setTimeout(resolve, 1500)); \n  try {\n    // Query 1: total produk\n    const totalProdukRes = await sql`SELECT COUNT(*) FROM produk`;\n    const totalProduk = Number(totalProdukRes[0].count);\n\n    // Query 2: total revenue (jumlah total_harga dari transaksi)\n    const totalRevenueRes = await sql`SELECT SUM(total_harga) FROM transaksi`;\n    const totalRevenue = Number(totalRevenueRes[0].sum || 0);\n\n    // Query 3: produk paling sering muncul di transaksi\n    const mostSoldRes = await sql`\n      SELECT p.nama_produk, COUNT(t.id_produk) AS jumlah_terjual\n      FROM transaksi t\n      JOIN produk p ON t.id_produk = p.id_produk\n      GROUP BY p.nama_produk\n      ORDER BY jumlah_terjual DESC\n      LIMIT 1;\n    `;\n    const mostSold = mostSoldRes[0];\n\n    return {\n      totalProduk,\n      totalRevenue,\n      mostSold: mostSold?.nama_produk || '-',\n      jumlahTerjual: mostSold?.jumlah_terjual || 0,\n    };\n  } catch (err) {\n    console.error('DB Error (analytics):', err);\n    throw new Error('Failed to fetch analytics data.');\n  }\n}\n\nexport async function fetchPenjualanProduk() {\n  await new Promise((resolve) => setTimeout(resolve, 2000)); \n  try {\n    const data = await sql<{ nama_produk: string; jumlah_terjual: number }[]>`\n      SELECT p.nama_produk, COUNT(t.id_produk) AS jumlah_terjual\n      FROM transaksi t\n      JOIN produk p ON t.id_produk = p.id_produk\n      GROUP BY p.nama_produk\n      ORDER BY jumlah_terjual DESC\n    `;\n    return data;\n  } catch (err) {\n    console.error('DB Error (grafik):', err);\n    throw new Error('Gagal ambil data grafik penjualan.');\n  }\n}\n\nexport async function fetchProdukWithFoto() {\n  const produk = await sql<{\n    id_produk: number;\n    nama_produk: string;\n    harga_produk: number;\n    foto: string;\n  }[]>`SELECT * FROM menu ORDER BY id_produk ASC`;\n  return produk;\n}\n\n"],"names":[],"mappings":";;;;;;;;AAWqB;AAXrB;;AAWA,MAAM,MAAM,CAAA,GAAA,2IAAA,CAAA,UAAQ,AAAD,EAAE,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,YAAY,EAAG;IAAE,KAAK;AAAU;AAkN1D,eAAe,YAAY,EAAU;IAC1C,IAAI;QACF,MAAM,SAAS,MAAM,GAIjB,CAAC;;;wBAGe,EAAE,GAAG;;IAEzB,CAAC;QAED,OAAO,MAAM,CAAC,EAAE;IAClB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AAEF;AACO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,GAAG,CAAC;;;;IAIzB,CAAC;QACD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AACF;AAIO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,IAAM,WAAW,GAAG;IACvC,IAAI;QACF,MAAM,YAAY,MAAM,GAMpB,CAAC;;IAEL,CAAC;QACD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,IAAI;QACF,wBAAwB;QACxB,MAAM,iBAAiB,MAAM,GAAG,CAAC,2BAA2B,CAAC;QAC7D,MAAM,cAAc,OAAO,cAAc,CAAC,EAAE,CAAC,KAAK;QAElD,6DAA6D;QAC7D,MAAM,kBAAkB,MAAM,GAAG,CAAC,sCAAsC,CAAC;QACzE,MAAM,eAAe,OAAO,eAAe,CAAC,EAAE,CAAC,GAAG,IAAI;QAEtD,oDAAoD;QACpD,MAAM,cAAc,MAAM,GAAG,CAAC;;;;;;;IAO9B,CAAC;QACD,MAAM,WAAW,WAAW,CAAC,EAAE;QAE/B,OAAO;YACL;YACA;YACA,UAAU,UAAU,eAAe;YACnC,eAAe,UAAU,kBAAkB;QAC7C;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACnD,IAAI;QACF,MAAM,OAAO,MAAM,GAAsD,CAAC;;;;;;IAM1E,CAAC;QACD,OAAO;IACT,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,sBAAsB;QACpC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,MAAM,SAAS,MAAM,GAKjB,CAAC,yCAAyC,CAAC;IAC/C,OAAO;AACT","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/nosifer_d0ad537.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"nosifer_d0ad537-module__-kDrfG__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/nosifer_d0ad537.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22fonts.ts%22,%22import%22:%22Nosifer%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22weight%22:%22400%22}],%22variableName%22:%22nosifer%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Nosifer', 'Nosifer Fallback'\",\n        fontWeight: 400,\nfontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,yJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,YAAY;QACpB,WAAW;IAEP;AACJ;AAEA,IAAI,yJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,yJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/alegreya_c449b61a.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"alegreya_c449b61a-module__PHpizq__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/alegreya_c449b61a.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22fonts.ts%22,%22import%22:%22Alegreya%22,%22arguments%22:[{%22subsets%22:[%22latin%22]}],%22variableName%22:%22alegreya%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Alegreya', 'Alegreya Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,2JAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,2JAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,2JAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/frijole_e11d2e94.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"frijole_e11d2e94-module__Jf0JEa__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/frijole_e11d2e94.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22fonts.ts%22,%22import%22:%22Frijole%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22weight%22:%22400%22}],%22variableName%22:%22frijole%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Frijole', 'Frijole Fallback'\",\n        fontWeight: 400,\nfontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,0JAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,YAAY;QACpB,WAAW;IAEP;AACJ;AAEA,IAAI,0JAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,0JAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 251, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { redirect } from 'next/navigation';\nimport postgres from 'postgres';\nimport { z } from 'zod';\n\nconst sql = postgres(process.env.POSTGRES_URL!, { ssl: 'require' });\n\nconst MenuSchema = z.object({\n  id: z.string(),\n  nama_produk: z.string(),\n  harga_produk: z.number(),\n});\n\nconst CreateMenu = MenuSchema.omit({ id: true });\nconst UpdateMenu = MenuSchema.omit({ id: true });\n\nexport async function createMenu(formData: FormData) {\n  const { nama_produk, harga_produk } = CreateMenu.parse({\n    nama_produk: formData.get('nama_produk'),\n    harga_produk: Number(formData.get('harga_produk')),\n  });\n\n  await sql`\n    INSERT INTO produk (nama_produk, harga_produk)\n    VALUES (${nama_produk}, ${harga_produk})\n  `;\n\n  revalidatePath('/admin/dashboard/menu');\n  redirect('/admin/dashboard/menu');\n}\n\nexport async function updateMenu(id: string, formData: FormData) {\n  const { nama_produk, harga_produk } = UpdateMenu.parse({\n    nama_produk: formData.get('nama_produk'),\n    harga_produk: Number(formData.get('harga_produk')),\n  });\n\n  await sql`\n    UPDATE produk\n    SET nama_produk = ${nama_produk}, harga_produk = ${harga_produk}\n    WHERE id_produk = ${id}\n  `;\n\n  revalidatePath('/admin/dashboard/menu');\n  redirect('/admin/dashboard/menu');\n}\n\nexport async function deleteMenu(id: string) {\n  await sql`DELETE FROM produk WHERE id_produk = ${id}`;\n  revalidatePath('/admin/dashboard/menu');\n}\n\n// const CreateTransaksi = TransaksiSchema.omit({ id: true, tanggal_transaksi: true });\n// const UpdateTransaksi = TransaksiSchema.omit({ id: true, tanggal_transaksi: true });\n\n// export async function createTransaksi(formData: FormData) {\n//   const { id_produk, nama_pembeli, total_harga } = CreateTransaksi.parse({\n//     id_produk: formData.get('id_produk'),\n//     nama_pembeli: formData.get('nama_pembeli'),\n//     total_harga: Number(formData.get('total_harga')),\n//   });\n\n//   const tanggal_transaksi = new Date().toISOString().split('T')[0];\n\n//   await sql`\n//     INSERT INTO transaksi (id_produk, nama_pembeli, total_harga, tanggal_transaksi)\n//     VALUES (${id_produk}, ${nama_pembeli}, ${total_harga}, ${tanggal_transaksi})\n//   `;\n\n//   revalidatePath('/admin/dashboard/transaksi');\n//   redirect('/admin/dashboard/transaksi');\n// }\n\n// export async function updateTransaksi(id: string, formData: FormData) {\n//   const { id_produk, nama_pembeli, total_harga } = UpdateTransaksi.parse({\n//     id_produk: formData.get('id_produk'),\n//     nama_pembeli: formData.get('nama_pembeli'),\n//     total_harga: Number(formData.get('total_harga')),\n//   });\n\n//   await sql`\n//     UPDATE transaksi\n//     SET id_produk = ${id_produk}, nama_pembeli = ${nama_pembeli}, total_harga = ${total_harga}\n//     WHERE id_transaksi = ${id}\n//   `;\n\n//   revalidatePath('/admin/dashboard/transaksi');\n//   redirect('/admin/dashboard/transaksi');\n// }\n\n// export async function deleteTransaksi(id: string) {\n//   await sql`DELETE FROM transaksi WHERE id_transaksi = ${id}`;\n//   revalidatePath('/admin/dashboard/transaksi');\n// }\n"],"names":[],"mappings":";;;;;;IAiDsB,aAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/menu/buttons.tsx"],"sourcesContent":["import { PencilIcon, PlusIcon, TrashIcon } from '@heroicons/react/24/outline';\nimport Link from 'next/link';\nimport { deleteMenu } from '@/app/lib/actions';\n\nexport function CreateProduk() {\n  return (\n    <Link\n      href=\"/admin/dashboard/menu/create\"\n      className=\"flex h-10 items-center rounded-lg bg-red-600 px-4 text-sm font-medium text-white transition-colors hover:bg-red-500 focus-visible:outline-offset-2 focus-visible:outline-red-600\"\n    >\n      <span className=\"hidden md:block\">Create Produk</span>{' '}\n      <PlusIcon className=\"h-5 md:ml-4\" />\n    </Link>\n  );\n}\n\nexport function UpdateProduk({ id }: { id: string }) {\n  return (\n    <Link\n      href={`/admin/dashboard/menu/${id}/edit`}\n      className=\"rounded-md border p-2 hover:bg-gray-100\"\n    >\n      <PencilIcon className=\"w-5\" />\n    </Link>\n  );\n}\n\nexport function DeleteProduk({ id }: { id: string }) {\n  const deleteMenuWithId = deleteMenu.bind(null, id);\n  \n  return (\n    <form action={deleteMenuWithId}>\n      <button \n        className=\"rounded-md border p-2 hover:bg-gray-100\"\n        onClick={(e) => {\n          if (!confirm('Apakah Anda yakin ingin menghapus produk ini?')) {\n            e.preventDefault();\n          }\n        }}\n      >\n        <span className=\"sr-only\">Delete</span>\n        <TrashIcon className=\"w-5\" />\n      </button>\n    </form>\n  );\n}"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AACA;AACA;;;;;AAEO,SAAS;IACd,qBACE,6LAAC,+JAAA,CAAA,UAAI;QACH,MAAK;QACL,WAAU;;0BAEV,6LAAC;gBAAK,WAAU;0BAAkB;;;;;;YAAqB;0BACvD,6LAAC,kNAAA,CAAA,WAAQ;gBAAC,WAAU;;;;;;;;;;;;AAG1B;KAVgB;AAYT,SAAS,aAAa,EAAE,EAAE,EAAkB;IACjD,qBACE,6LAAC,+JAAA,CAAA,UAAI;QACH,MAAM,CAAC,sBAAsB,EAAE,GAAG,KAAK,CAAC;QACxC,WAAU;kBAEV,cAAA,6LAAC,sNAAA,CAAA,aAAU;YAAC,WAAU;;;;;;;;;;;AAG5B;MATgB;AAWT,SAAS,aAAa,EAAE,EAAE,EAAkB;IACjD,MAAM,mBAAmB,4JAAA,CAAA,aAAU,CAAC,IAAI,CAAC,MAAM;IAE/C,qBACE,6LAAC;QAAK,QAAQ;kBACZ,cAAA,6LAAC;YACC,WAAU;YACV,SAAS,CAAC;gBACR,IAAI,CAAC,QAAQ,kDAAkD;oBAC7D,EAAE,cAAc;gBAClB;YACF;;8BAEA,6LAAC;oBAAK,WAAU;8BAAU;;;;;;8BAC1B,6LAAC,oNAAA,CAAA,YAAS;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAI7B;MAlBgB","debugId":null}},
    {"offset": {"line": 382, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/menu/table.tsx"],"sourcesContent":["'use client'\n\nimport { fetchAllProduk } from '@/app/lib/data';\nimport { alegreya } from '@/app/ui/fonts';\nimport { UpdateProduk, DeleteProduk } from '@/app/ui/menu/buttons';\n\nexport default async function ProdukTable({\n  searchParams,\n}: {\n  searchParams: { query?: string; page?: string };\n}) {\n  const query = searchParams.query?.toLowerCase() || '';\n  const currentPage = parseInt(searchParams.page || '1', 10);\n  const itemsPerPage = 5;\n\n  const produkList = await fetchAllProduk();\n\n  const filtered = produkList.filter((produk) =>\n    produk.nama_produk.toLowerCase().includes(query)\n  );\n\n  const totalItems = filtered.length;\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const paginated = filtered.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  return (\n    <>\n      <div className=\"mt-6 flow-root\">\n        <div className=\"inline-block min-w-full align-middle\">\n          <div className=\"rounded-lg bg-gray-50 p-2 md:pt-0\">\n            {/* Mobile view */}\n            <div className=\"md:hidden\">\n              {paginated.map((produk) => (\n                <div\n                  key={produk.id_produk}\n                  className=\"mb-2 w-full rounded-md bg-white p-4\"\n                >\n                  <div className=\"flex items-center justify-between border-b pb-4\">\n                    <div>\n                      <div className=\"mb-2 flex items-center\">\n                        <p className=\"text-lg font-medium\">{produk.nama_produk}</p>\n                      </div>\n                      <p className=\"text-sm text-gray-500\">ID: {produk.id_produk}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex w-full items-center justify-between pt-4\">\n                    <div>\n                      <p className=\"text-xl font-medium\">\n                        Rp {produk.harga_produk.toLocaleString()}\n                      </p>\n                    </div>\n                    <div className=\"flex justify-end gap-2\">\n                      <UpdateProduk id={produk.id_produk.toString()} />\n                      <DeleteProduk id={produk.id_produk.toString()} />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Desktop table view */}\n            <table className=\"hidden min-w-full text-gray-900 md:table\">\n              <thead className=\"rounded-lg text-left text-sm font-normal\">\n                <tr>\n                  <th scope=\"col\" className={`${alegreya.className} px-4 py-5 font-medium sm:pl-6`}>\n                    ID Produk\n                  </th>\n                  <th scope=\"col\" className={`${alegreya.className} px-3 py-5 font-medium`}>\n                    Nama Produk\n                  </th>\n                  <th scope=\"col\" className={`${alegreya.className} px-3 py-5 font-medium`}>\n                    Harga\n                  </th>\n                  <th scope=\"col\" className=\"relative py-3 pl-6 pr-3\">\n                    <span className=\"sr-only\">Actions</span>\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white\">\n                {paginated.map((produk) => (\n                  <tr\n                    key={produk.id_produk}\n                    className=\"w-full border-b py-3 text-sm last-of-type:border-none [&:first-child>td:first-child]:rounded-tl-lg [&:first-child>td:last-child]:rounded-tr-lg [&:last-child>td:first-child]:rounded-bl-lg [&:last-child>td:last-child]:rounded-br-lg\"\n                  >\n                    <td className=\"whitespace-nowrap py-3 pl-6 pr-3\">\n                      {produk.id_produk}\n                    </td>\n                    <td className=\"whitespace-nowrap px-3 py-3\">\n                      {produk.nama_produk}\n                    </td>\n                    <td className=\"whitespace-nowrap px-3 py-3\">\n                      Rp {produk.harga_produk.toLocaleString()}\n                    </td>\n                    <td className=\"whitespace-nowrap py-3 pl-6 pr-3\">\n                      <div className=\"flex justify-end gap-3\">\n                        <UpdateProduk id={produk.id_produk.toString()} />\n                        <DeleteProduk id={produk.id_produk.toString()} />\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n\n      {/* Pagination */}\n      <div className=\"mt-4 flex justify-center gap-2\">\n        {[...Array(totalPages)].map((_, i) => {\n          const page = i + 1;\n          const params = new URLSearchParams();\n\n          Object.entries(searchParams).forEach(([key, value]) => {\n            if (value && key !== 'page') params.set(key, value);\n          });\n\n          params.set('page', String(page));\n          const href = `?${params.toString()}`;\n\n          return (\n            <a\n              key={page}\n              href={href}\n              className={`rounded px-3 py-1 text-sm ${\n                page === currentPage ? 'bg-red-900 text-white' : 'border'\n              }`}\n            >\n              {page}\n            </a>\n          );\n        })}\n      </div>\n    </>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 717, "column": 0}, "map": {"version":3,"sources":["file:///root/CODING/tubes-siweb/src/app/ui/search.tsx"],"sourcesContent":["\"use client\";\n\nimport { usePathname, useRouter, useSearchParams } from \"next/navigation\";\nimport { MagnifyingGlassIcon } from \"@heroicons/react/24/outline\";\nimport { useDebouncedCallback } from \"use-debounce\";\n\nexport default function Search({ placeholder }: { placeholder: string }) {\n  const searchParams = useSearchParams();\n  const replace = useRouter();\n  const pathname = usePathname();\n\n  const defaultQuery = searchParams.get(\"query\") || \"\";\n\n  const handleSearch = useDebouncedCallback((term: string) => {\n    const params = new URLSearchParams(searchParams);\n\n    params.set(\"page\", \"1\"); \n\n    if (term) {\n      params.set(\"query\", term);\n    } else {\n      params.delete(\"query\");\n    }\n\n    replace.replace(`${pathname}?${params.toString()}`);\n  }, 300); \n\n  return (\n    <div className=\"relative flex flex-1 flex-shrink-0\">\n      <label htmlFor=\"search\" className=\"sr-only\">\n        Search\n      </label>\n      <input\n        id=\"search\"\n        defaultValue={defaultQuery}\n        className=\"peer block w-full rounded-md border border-gray-200 py-[9px] pl-10 text-sm outline-2 placeholder:text-gray-500\"\n        placeholder={placeholder}\n        onChange={(e) => handleSearch(e.target.value)}\n      />\n      <MagnifyingGlassIcon className=\"absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900\" />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAMe,SAAS,OAAO,EAAE,WAAW,EAA2B;;IACrE,MAAM,eAAe,CAAA,GAAA,qIAAA,CAAA,kBAAe,AAAD;IACnC,MAAM,UAAU,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACxB,MAAM,WAAW,CAAA,GAAA,qIAAA,CAAA,cAAW,AAAD;IAE3B,MAAM,eAAe,aAAa,GAAG,CAAC,YAAY;IAElD,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,uBAAoB,AAAD;qDAAE,CAAC;YACzC,MAAM,SAAS,IAAI,gBAAgB;YAEnC,OAAO,GAAG,CAAC,QAAQ;YAEnB,IAAI,MAAM;gBACR,OAAO,GAAG,CAAC,SAAS;YACtB,OAAO;gBACL,OAAO,MAAM,CAAC;YAChB;YAEA,QAAQ,OAAO,CAAC,GAAG,SAAS,CAAC,EAAE,OAAO,QAAQ,IAAI;QACpD;oDAAG;IAEH,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAM,SAAQ;gBAAS,WAAU;0BAAU;;;;;;0BAG5C,6LAAC;gBACC,IAAG;gBACH,cAAc;gBACd,WAAU;gBACV,aAAa;gBACb,UAAU,CAAC,IAAM,aAAa,EAAE,MAAM,CAAC,KAAK;;;;;;0BAE9C,6LAAC,wOAAA,CAAA,sBAAmB;gBAAC,WAAU;;;;;;;;;;;;AAGrC;GApCwB;;QACD,qIAAA,CAAA,kBAAe;QACpB,qIAAA,CAAA,YAAS;QACR,qIAAA,CAAA,cAAW;QAIP,6JAAA,CAAA,uBAAoB;;;KAPnB","debugId":null}}]
}